import { Injectable, NotFoundException, Logger } from '@nestjs/common';
import { DatabaseService } from '../../../../database/database.service';
import { CriarInformacaoAdvanceDto } from '../dto/criar-informacao-advance.dto';
import { AtualizarInformacaoAdvanceDto } from '../dto/atualizar-informacao-advance.dto';

/**
 * üìä Service para gest√£o das informa√ß√µes da Advance
 */
@Injectable()
export class InformacaoAdvanceService {
  private readonly logger = new Logger(InformacaoAdvanceService.name);

  constructor(private database: DatabaseService) {}

  /**
   * üìã Listar todas as informa√ß√µes
   */
  async listarTodos() {
    try {
      return await this.database.informacaoAdvance.findMany({
        orderBy: { criadoEm: 'desc' },
      });
    } catch (error) {
      this.logger.error('Erro ao listar informa√ß√µes da Advance:', error);
      throw error;
    }
  }

  /**
   * üîç Buscar informa√ß√£o por ID
   */
  async buscarPorId(id: number) {
    try {
      const informacao = await this.database.informacaoAdvance.findUnique({
        where: { id },
      });

      if (!informacao) {
        throw new NotFoundException(
          `Informa√ß√£o da Advance com ID ${id} n√£o encontrada`,
        );
      }

      return informacao;
    } catch (error) {
      this.logger.error(`Erro ao buscar informa√ß√£o da Advance ${id}:`, error);
      throw error;
    }
  }

  /**
   * ‚ûï Criar nova informa√ß√£o
   */
  async criar(criarInformacaoAdvanceDto: CriarInformacaoAdvanceDto) {
    try {
      const informacao = await this.database.informacaoAdvance.create({
        data: criarInformacaoAdvanceDto,
      });

      this.logger.log(`Informa√ß√£o da Advance criada: ${informacao.id}`);
      return informacao;
    } catch (error) {
      this.logger.error('Erro ao criar informa√ß√£o da Advance:', error);
      throw error;
    }
  }

  /**
   * ‚úèÔ∏è Atualizar informa√ß√£o
   */
  async atualizar(
    id: number,
    atualizarInformacaoAdvanceDto: AtualizarInformacaoAdvanceDto,
  ) {
    try {
      await this.buscarPorId(id);

      const informacao = await this.database.informacaoAdvance.update({
        where: { id },
        data: atualizarInformacaoAdvanceDto,
      });

      this.logger.log(`Informa√ß√£o da Advance atualizada: ${informacao.id}`);
      return informacao;
    } catch (error) {
      this.logger.error(
        `Erro ao atualizar informa√ß√£o da Advance ${id}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * üóëÔ∏è Remover informa√ß√£o
   */
  async remover(id: number) {
    try {
      await this.buscarPorId(id);

      await this.database.informacaoAdvance.delete({
        where: { id },
      });

      this.logger.log(`Informa√ß√£o da Advance removida: ${id}`);
      return { message: 'Informa√ß√£o da Advance removida com sucesso' };
    } catch (error) {
      this.logger.error(`Erro ao remover informa√ß√£o da Advance ${id}:`, error);
      throw error;
    }
  }
}
