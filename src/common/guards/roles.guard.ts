import {
  Injectable,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Role } from '@prisma/client';
import { ROLES_KEY } from '../decorators/roles.decorator';
import { AuthenticatedUser } from '../types/request.interface';

/**
 * üõ°Ô∏è Guard para verifica√ß√£o de roles
 * Verifica se o usu√°rio possui uma das roles necess√°rias
 */
@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  /**
   * üîç Verifica se o usu√°rio tem permiss√£o de acesso
   */
  canActivate(context: ExecutionContext): boolean {
    // üìã Obter roles necess√°rias do decorator
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    // ‚úÖ Se n√£o h√° roles espec√≠ficas, permitir acesso
    if (!requiredRoles) {
      return true;
    }

    // üë§ Obter usu√°rio da requisi√ß√£o
    const { user }: { user: AuthenticatedUser } = context
      .switchToHttp()
      .getRequest();

    if (!user) {
      throw new ForbiddenException('Usu√°rio n√£o autenticado');
    }

    // üîç Verificar se o usu√°rio possui uma das roles necess√°rias
    const hasRole = requiredRoles.includes(user.role);

    if (!hasRole) {
      throw new ForbiddenException(
        `Acesso negado. Roles necess√°rias: ${requiredRoles.join(', ')}. Sua role: ${user.role}`,
      );
    }

    return true;
  }
}
