import { Request, Response, NextFunction } from 'express';
import { EmailVerificationService } from '../services/email-verification-service';
import { logger } from '@/utils/logger';

/**
 * Middleware robusto para envio de email de verifica√ß√£o
 * Implementa padr√µes de microservi√ßos com execu√ß√£o ass√≠ncrona
 *
 * Responsabilidades:
 * - Enviar email de verifica√ß√£o de forma n√£o-bloqueante
 * - Nunca falhar o processo de registro
 * - Logs detalhados para observabilidade
 * - Valida√ß√£o rigorosa de dados
 * - Execu√ß√£o em background
 */
export class EmailVerificationMiddleware {
  private emailVerificationService: EmailVerificationService;
  private readonly log = logger.child({ module: 'EmailVerificationMiddleware' });

  constructor() {
    this.emailVerificationService = new EmailVerificationService();
  }

  /**
   * Middleware principal - execu√ß√£o ass√≠ncrona robusta
   */
  public sendVerificationEmail = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<void> => {
    const rawCorrelationId = req.headers['x-correlation-id'];
    const correlationId: string = Array.isArray(rawCorrelationId)
      ? rawCorrelationId[0] || 'unknown'
      : rawCorrelationId || 'unknown';
    const log = this.log.child({ correlationId, method: 'sendVerificationEmail' });

    try {
      log.info('üìß EmailVerificationMiddleware: Iniciando processamento');

      // Extrai dados do usu√°rio
      const userData = this.extractUserData(res, correlationId);

      if (userData) {
        log.info({ email: userData.email }, 'üìß Dados extra√≠dos para verifica√ß√£o');

        // Execu√ß√£o completamente ass√≠ncrona sem await
        this.processVerificationEmailAsync(userData, correlationId);

        log.info({ email: userData.email }, 'üìß Email de verifica√ß√£o agendado');
      } else {
        log.warn('‚ö†Ô∏è Dados insuficientes para email de verifica√ß√£o');
      }
    } catch (error) {
      log.error({ err: error }, '‚ùå Erro no middleware de verifica√ß√£o');
      // Nunca falha o fluxo principal
    }

    // SEMPRE continua o fluxo
    next();
  };

  /**
   * Extrai dados do usu√°rio de forma segura
   */
  private extractUserData(res: Response, correlationId: string): any {
    const log = this.log.child({ correlationId, method: 'extractUserData' });
    try {
      log.info('üîç Extraindo dados do res.locals para verifica√ß√£o');

      if (!res.locals?.usuarioCriado?.usuario) {
        log.warn('‚ö†Ô∏è res.locals.usuarioCriado.usuario n√£o existe');
        return null;
      }

      const userData = res.locals.usuarioCriado.usuario;

      // Valida√ß√£o rigorosa
      const requiredFields = ['id', 'email', 'nomeCompleto', 'tipoUsuario'];
      const missingFields = requiredFields.filter((field) => !userData[field]);

      if (missingFields.length > 0) {
        log.warn({ missingFields }, '‚ö†Ô∏è Campos obrigat√≥rios ausentes para verifica√ß√£o');
        return null;
      }

      // Valida√ß√£o de email
      if (!this.isValidEmail(userData.email)) {
        log.warn({ email: userData.email }, '‚ö†Ô∏è Email inv√°lido para verifica√ß√£o');
        return null;
      }

      const processedData = {
        id: userData.id,
        email: userData.email.toLowerCase().trim(),
        nomeCompleto: userData.nomeCompleto.trim(),
        tipoUsuario: userData.tipoUsuario,
      };

      log.info(
        {
          id: processedData.id,
          email: processedData.email,
          nomeCompleto: processedData.nomeCompleto,
          tipoUsuario: processedData.tipoUsuario,
        },
        '‚úÖ Dados v√°lidos extra√≠dos para verifica√ß√£o',
      );

      return processedData;
    } catch (error) {
      log.error({ err: error }, '‚ùå Erro ao extrair dados para verifica√ß√£o');
      return null;
    }
  }

  /**
   * Processa email de verifica√ß√£o de forma completamente ass√≠ncrona
   */
  private processVerificationEmailAsync(userData: any, correlationId: string): void {
    const log = this.log.child({ correlationId, method: 'processVerificationEmailAsync' });
    // Usa setImmediate para execu√ß√£o ass√≠ncrona garantida
    setImmediate(async () => {
      try {
        log.info({ email: userData.email }, 'üìß Iniciando envio ass√≠ncrono de verifica√ß√£o');

        const startTime = Date.now();
        const result = await this.emailVerificationService.sendVerificationEmail(userData);
        const duration = Date.now() - startTime;

        if (result.success) {
          if (result.simulated) {
            log.info({ email: userData.email, duration }, 'üé≠ Email de verifica√ß√£o simulado');
          } else {
            log.info({ email: userData.email, duration }, '‚úÖ Email de verifica√ß√£o enviado');
            log.info({ email: userData.email, messageId: result.messageId }, 'üìß Message ID registrado');
            log.info(
              {
                email: userData.email,
                tokenExpiration: result.tokenExpiration,
              },
              '‚è∞ Token de verifica√ß√£o registrado',
            );
          }
        } else {
          log.error({ email: userData.email, error: result.error }, '‚ùå Falha no email de verifica√ß√£o');
        }
      } catch (error) {
        log.error(
          {
            email: userData.email,
            err: error,
          },
          '‚ùå Erro cr√≠tico no email de verifica√ß√£o',
        );
      }
    });
  }

  /**
   * Valida formato de email
   */
  private isValidEmail(email: string): boolean {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  /**
   * Factory method para cria√ß√£o do middleware
   */
  public static create() {
    const factoryLogger = logger.child({ module: 'EmailVerificationMiddlewareFactory' });
    factoryLogger.info('üè≠ EmailVerificationMiddleware: Criando inst√¢ncia do middleware');
    const instance = new EmailVerificationMiddleware();
    return instance.sendVerificationEmail;
  }
}
