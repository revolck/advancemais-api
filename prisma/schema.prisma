generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuarios {
  id           String      @id @default(uuid())
  nomeCompleto String
  supabaseId   String      @unique
  cpf          String?     @unique
  cnpj         String?     @unique
  email        String      @unique
  senha        String
  codUsuario   String      @unique
  tipoUsuario  TiposDeUsuarios
  role         Roles
  status       Status      @default(ATIVO)
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  ultimoLogin  DateTime?
  refreshToken String?
  sessoes      UsuariosSessoes[]

  // RELACIONAMENTOS EXISTENTES
  enderecos            UsuariosEnderecos[]
  vagasCriadas         EmpresasVagas[]    @relation("UsuarioVagas")
  planosContratados    EmpresasPlano[]    @relation("UsuarioPlanos")
  banimentosRecebidos  UsuariosEmBanimentos[] @relation("UsuariosEmBanimentosUsuario")
  banimentosAplicados  UsuariosEmBanimentos[] @relation("UsuariosEmBanimentosAdmin")
  banimentosLogsCriados UsuariosEmBanimentosLogs[] @relation("UsuariosEmBanimentosLogsAdmin")
  redesSociais         UsuariosRedesSociais?
  recuperacaoSenha     UsuariosRecuperacaoSenha?
  emailVerification    UsuariosVerificacaoEmail?
  informacoes          UsuariosInformation?

  @@index([status])
  @@index([role])
  @@index([tipoUsuario])
  @@index([criadoEm])
}

model UsuariosInformation {
  usuarioId     String   @id
  telefone      String
  genero        String?
  dataNasc      DateTime?
  matricula     String?
  avatarUrl     String?
  descricao     String?  @db.VarChar(500)
  aceitarTermos Boolean  @default(false)

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model CandidatosAreasInteresse {
  id           Int                             @id @default(autoincrement())
  categoria    String                          @db.VarChar(120)
  subareas     CandidatosSubareasInteresse[]
  criadoEm     DateTime                        @default(now())
  atualizadoEm DateTime                        @updatedAt

  @@map("candidatos_areas_interesse")
  @@index([categoria])
}

model CandidatosSubareasInteresse {
  id        Int                        @id @default(autoincrement())
  areaId    Int
  nome      String                     @db.VarChar(120)
  criadoEm  DateTime                   @default(now())
  atualizadoEm DateTime                @updatedAt

  area CandidatosAreasInteresse @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@map("candidatos_subareas_interesse")
  @@unique([areaId, nome])
  @@index([nome])
}

model UsuariosVerificacaoEmail {
  usuarioId                  String   @id
  emailVerificado            Boolean  @default(false)
  emailVerificadoEm          DateTime?
  emailVerificationToken     String?  @unique
  emailVerificationTokenExp  DateTime?
  emailVerificationAttempts  Int      @default(0)
  ultimaTentativaVerificacao DateTime?

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([emailVerificationToken])
  @@index([emailVerificationTokenExp])
}

model UsuariosRecuperacaoSenha {
  id                          String   @id @default(uuid())
  usuarioId                   String   @unique
  tokenRecuperacao            String?
  tokenRecuperacaoExp         DateTime?
  tentativasRecuperacao       Int      @default(0)
  ultimaTentativaRecuperacao  DateTime?
  criadoEm                    DateTime @default(now())
  atualizadoEm                DateTime @updatedAt

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([tokenRecuperacao])
}

model UsuariosSessoes {
  id          String   @id @default(uuid())
  usuarioId   String
  refreshToken String   @unique
  rememberMe  Boolean  @default(false)
  ip          String?  @db.VarChar(45)
  userAgent   String?  @db.VarChar(512)
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  expiraEm    DateTime
  revogadoEm  DateTime?

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId, rememberMe])
  @@index([expiraEm])
}

enum RegimesDeTrabalhos {
  CLT
  TEMPORARIO
  ESTAGIO
  PJ
  HOME_OFFICE
  JOVEM_APRENDIZ
}

enum ModalidadesDeVagas {
  PRESENCIAL
  REMOTO
  HIBRIDO
}

enum Jornadas {
  INTEGRAL
  MEIO_PERIODO
  FLEXIVEL
  TURNOS
  NOTURNO
}

enum StatusDeVagas {
  RASCUNHO
  EM_ANALISE
  PUBLICADO
  EXPIRADO
  DESPUBLICADA
  PAUSADA
  ENCERRADA
}

enum Senioridade {
  ABERTO
  ESTAGIARIO
  JUNIOR
  PLENO
  SENIOR
  ESPECIALISTA
  LIDER
}

enum TiposDePlanos {
  SETE_DIAS         @map("7_dias")
  QUINZE_DIAS       @map("15_dias")
  TRINTA_DIAS       @map("30_dias")
  SESSENTA_DIAS     @map("60_dias")
  NOVENTA_DIAS      @map("90dias")
  CENTO_VINTE_DIAS  @map("120_dias")
  ASSINATURA_MENSAL @map("assinatura_mensal")
  PARCEIRO          @map("parceiro")
}

enum TiposDeBanimentos {
  TEMPORARIO
  PERMANENTE
  RESTRICAO_DE_RECURSO
}

enum StatusDeBanimentos {
  ATIVO
  EM_REVISAO
  REVOGADO
  EXPIRADO
}

enum MotivosDeBanimentos {
  SPAM
  VIOLACAO_POLITICAS
  FRAUDE
  ABUSO_DE_RECURSOS
  OUTROS
}

enum AcoesDeLogDeBanimento {
  CRIACAO
  ATUALIZACAO
  REVOGACAO
  REAVALIACAO
}

model EmpresasVagas {
  id               String         @id @default(uuid())
  codigo           String         @unique @db.VarChar(6)
  slug             String         @unique @db.VarChar(120)
  usuarioId        String
  modoAnonimo      Boolean        @default(false)
  regimeDeTrabalho RegimesDeTrabalhos
  modalidade       ModalidadesDeVagas
  titulo           String         @db.VarChar(255)
  paraPcd          Boolean        @default(false)
  numeroVagas      Int            @default(1)
  descricao        String?        @db.Text
  requisitos       Json
  atividades       Json
  beneficios       Json
  observacoes      String?        @db.Text
  jornada          Jornadas       @default(INTEGRAL)
  senioridade      Senioridade    @default(ABERTO)
  inscricoesAte    DateTime?
  inseridaEm       DateTime       @default(now())
  atualizadoEm     DateTime       @updatedAt
  status           StatusDeVagas @default(RASCUNHO)
  localizacao      Json?
  salarioMin       Decimal?       @db.Decimal(12, 2)
  salarioMax       Decimal?       @db.Decimal(12, 2)
  salarioConfidencial Boolean     @default(true)
  maxCandidaturasPorUsuario Int?

  empresa Usuarios @relation("UsuarioVagas", fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
}

model EmpresasPlano {
  id                    String        @id @default(uuid())
  usuarioId             String
  planosEmpresariaisId  String
  tipo                  TiposDePlanos
  inicio                DateTime?
  fim                   DateTime?
  ativo                 Boolean       @default(false)
  observacao            String?       @db.Text
  criadoEm              DateTime      @default(now())
  atualizadoEm          DateTime      @updatedAt

  // Integração de pagamentos/assinaturas (Mercado Pago)
  modeloPagamento  MODELO_PAGAMENTO?
  metodoPagamento  METODO_PAGAMENTO?
  statusPagamento  STATUS_PAGAMENTO? @default(PENDENTE)
  mpPreapprovalId  String?           @unique
  mpSubscriptionId String?           @unique
  mpPayerId        String?
  mpPaymentId      String?
  proximaCobranca  DateTime?
  graceUntil       DateTime?

  empresa Usuarios            @relation("UsuarioPlanos", fields: [usuarioId], references: [id], onDelete: Cascade)
  plano   PlanosEmpresariais @relation(fields: [planosEmpresariaisId], references: [id])

  @@index([usuarioId, ativo])
  @@index([planosEmpresariaisId])
}

model LogsPagamentosDeAssinaturas {
  id              String   @id @default(uuid())
  usuarioId       String?
  empresasPlanoId String?
  tipo           String
  status         String?
  externalRef    String?
  mpResourceId   String?
  payload        Json?
  mensagem       String?  @db.Text
  criadoEm       DateTime @default(now())

  @@index([usuarioId])
  @@index([empresasPlanoId])
  @@index([tipo])
  @@index([criadoEm])
}

model UsuariosEmBanimentos {
  id            String              @id @default(uuid())
  usuarioId     String
  aplicadoPorId String
  tipo          TiposDeBanimentos
  motivo        MotivosDeBanimentos
  status        StatusDeBanimentos @default(ATIVO)
  inicio        DateTime           @default(now())
  fim           DateTime?
  observacoes   String?            @db.VarChar(500)
  criadoEm      DateTime           @default(now())
  atualizadoEm  DateTime           @updatedAt

  usuario     Usuarios                   @relation("UsuariosEmBanimentosUsuario", fields: [usuarioId], references: [id], onDelete: Cascade)
  aplicadoPor Usuarios                   @relation("UsuariosEmBanimentosAdmin", fields: [aplicadoPorId], references: [id])
  logs        UsuariosEmBanimentosLogs[]

  @@index([usuarioId])
  @@index([status])
  @@index([fim])
}

model UsuariosEmBanimentosLogs {
  id           String                 @id @default(uuid())
  banimentoId  String
  acao         AcoesDeLogDeBanimento
  descricao    String?                @db.VarChar(500)
  criadoPorId  String
  criadoEm     DateTime               @default(now())

  banimento UsuariosEmBanimentos @relation(fields: [banimentoId], references: [id], onDelete: Cascade)
  criadoPor Usuarios             @relation("UsuariosEmBanimentosLogsAdmin", fields: [criadoPorId], references: [id])

  @@index([banimentoId])
  @@index([criadoPorId])
  @@index([criadoEm])
}

model PlanosEmpresariais {
  id                      String   @id @default(uuid())
  icon                    String
  nome                    String
  descricao               String
  valor                   String
  desconto                Float?
  quantidadeVagas         Int
  vagaEmDestaque          Boolean  @default(false)
  quantidadeVagasDestaque Int?
  criadoEm                DateTime @default(now())
  atualizadoEm            DateTime @updatedAt

  empresas EmpresasPlano[]

  // Integração Mercado Pago - plano recorrente reutilizável
  mpPreapprovalPlanId String? @unique
}

model UsuariosEnderecos {
  id           String   @id @default(uuid())
  usuarioId    String
  logradouro   String?
  numero       String?
  bairro       String?
  cidade       String?
  estado       String?
  cep          String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  usuario      Usuarios @relation(fields: [usuarioId], references: [id])
}


model LogEmail {
  id           String      @id @default(uuid())
  usuarioId    String?
  email        String
  tipoEmail    TiposDeEmails
  status       StatusEmail
  tentativas   Int         @default(1)
  erro         String?
  messageId    String?
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt

  @@index([usuarioId])
  @@index([email])
  @@index([tipoEmail])
  @@index([criadoEm])
}

model LogSMS {
  id           String    @id @default(uuid())
  usuarioId    String?
  telefone     String
  tipoSMS      TipoSMS
  status       StatusSMS
  tentativas   Int       @default(1)
  erro         String?
  messageId    String?
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt

  @@index([usuarioId])
  @@index([telefone])
  @@index([tipoSMS])
  @@index([criadoEm])
}

model WebsiteSobre {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteConsultoria {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  buttonUrl    String
  buttonLabel  String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteRecrutamento {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  buttonUrl    String
  buttonLabel  String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSobreEmpresa {
  id               String   @id @default(uuid())
  titulo           String
  descricao        String
  descricaoVisao   String
  descricaoMissao  String
  descricaoValores String
  videoUrl         String
  criadoEm         DateTime @default(now())
  atualizadoEm     DateTime @updatedAt
}

model WebsiteTeam {
  id           String   @id @default(uuid())
  photoUrl     String
  nome         String
  cargo        String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem WebsiteTeamOrdem?
}

model WebsiteTeamOrdem {
  id            String        @id @default(uuid())
  websiteTeamId String        @unique
  ordem         Int
  status        WebsiteStatus @default(RASCUNHO)
  criadoEm      DateTime      @default(now())

  team WebsiteTeam @relation(fields: [websiteTeamId], references: [id], onDelete: Cascade)

  @@unique([ordem])
  @@index([ordem])
  @@index([status])
}

model WebsiteDepoimento {
  id           String   @id @default(uuid())
  depoimento   String
  nome         String
  cargo        String
  fotoUrl      String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem WebsiteDepoimentoOrdem?
}

model WebsiteDepoimentoOrdem {
  id                  String        @id @default(uuid())
  websiteDepoimentoId String        @unique
  ordem               Int
  status              WebsiteStatus @default(RASCUNHO)
  criadoEm            DateTime      @default(now())

  depoimento WebsiteDepoimento @relation(fields: [websiteDepoimentoId], references: [id], onDelete: Cascade)

  @@unique([ordem])
  @@index([ordem])
}

model WebsiteDiferenciais {
  id           String   @id @default(uuid())
  icone1       String
  titulo1      String
  descricao1   String
  icone2       String
  titulo2      String
  descricao2   String
  icone3       String
  titulo3      String
  descricao3   String
  icone4       String
  titulo4      String
  descricao4   String
  titulo       String
  descricao    String
  botaoUrl     String
  botaoLabel   String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSlider {
  id           String   @id @default(uuid())
  sliderName   String
  imagemUrl    String
  link         String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem WebsiteSliderOrdem?
}

model WebsiteSliderOrdem {
  id              String            @id @default(uuid())
  websiteSliderId String            @unique
  ordem           Int
  orientacao      WebsiteSlidersOrientations
  status          WebsiteStatus     @default(RASCUNHO)
  criadoEm        DateTime          @default(now())

  slider WebsiteSlider @relation(fields: [websiteSliderId], references: [id], onDelete: Cascade)

  @@unique([ordem, orientacao])
  @@index([ordem])
}

model WebsiteBanner {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  link         String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem WebsiteBannerOrdem?
}

model WebsiteBannerOrdem {
  id              String        @id @default(uuid())
  websiteBannerId String        @unique
  ordem           Int
  status          WebsiteStatus @default(RASCUNHO)
  criadoEm        DateTime      @default(now())

  banner WebsiteBanner @relation(fields: [websiteBannerId], references: [id], onDelete: Cascade)

  @@unique([ordem])
  @@index([ordem])
  @@index([status])
}

model WebsiteLogoEnterprise {
  id           String   @id @default(uuid())
  nome         String
  imagemUrl    String
  imagemAlt    String
  website      String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem WebsiteLogoEnterpriseOrdem?
}

model WebsiteLogoEnterpriseOrdem {
  id                      String        @id @default(uuid())
  websiteLogoEnterpriseId String        @unique
  ordem                   Int
  status                  WebsiteStatus @default(RASCUNHO)
  criadoEm                DateTime      @default(now())

  logo WebsiteLogoEnterprise @relation(fields: [websiteLogoEnterpriseId], references: [id], onDelete: Cascade)

  @@unique([ordem])
  @@index([ordem])
  @@index([status])
}

model WebsiteImagemLogin {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  link         String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsitePlaninhas {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  icone1       String
  titulo1      String
  descricao1   String
  icone2       String
  titulo2      String
  descricao2   String
  icone3       String
  titulo3      String
  descricao3   String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteAdvanceAjuda {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  imagemUrl    String
  imagemTitulo String
  titulo1      String
  descricao1   String
  titulo2      String
  descricao2   String
  titulo3      String
  descricao3   String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteRecrutamentoSelecao {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  imagemUrl    String
  imagemTitulo String
  titulo1      String
  titulo2      String
  titulo3      String
  titulo4      String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSistema {
  id              String   @id @default(uuid())
  titulo          String
  descricao       String
  subtitulo       String
  etapa1Titulo    String
  etapa1Descricao String
  etapa2Titulo    String
  etapa2Descricao String
  etapa3Titulo    String
  etapa3Descricao String
  criadoEm        DateTime @default(now())
  atualizadoEm    DateTime @updatedAt
}

model WebsiteTreinamentoCompany {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  imagemUrl    String
  imagemTitulo String
  titulo1      String
  titulo2      String
  titulo3      String
  titulo4      String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteConexaoForte {
  id            String   @id @default(uuid())
  titulo        String
  descricao     String
  imagemUrl1    String
  imagemTitulo1 String
  imagemUrl2    String
  imagemTitulo2 String
  imagemUrl3    String
  imagemTitulo3 String
  imagemUrl4    String
  imagemTitulo4 String
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
}

model WebsiteTreinamentosInCompany {
  id           String   @id @default(uuid())
  titulo       String
  icone1       String
  descricao1   String
  icone2       String
  descricao2   String
  icone3       String
  descricao3   String
  icone4       String
  descricao4   String
  icone5       String
  descricao5   String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteInformacoes {
  id           String   @id @default(uuid())
  endereco     String?
  cep          String?
  cidade       String?
  estado       String?
  telefone1    String?
  telefone2    String?
  whatsapp     String?
  linkedin     String?
  facebook     String?
  instagram    String?
  youtube      String?
  email        String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  horarios WebsiteHorarioFuncionamento[]
}

model UsuariosRedesSociais {
  id         String   @id @default(uuid())
  usuarioId  String   @unique
  instagram  String?
  linkedin   String?
  facebook   String?
  youtube    String?
  twitter    String?
  tiktok     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
}

model WebsiteHorarioFuncionamento {
  id            String             @id @default(uuid())
  diaDaSemana   String
  horarioInicio String
  horarioFim    String
  informacoes   WebsiteInformacoes @relation(fields: [informacoesId], references: [id], onDelete: Cascade)
  informacoesId String
  criadoEm      DateTime           @default(now())
  atualizadoEm  DateTime           @updatedAt
}

model WebsiteHeaderPage {
  id           String                @id @default(uuid())
  subtitulo    String
  titulo       String
  descricao    String
  imagemUrl    String
  buttonLabel  String
  buttonLink   String
  page         WebsiteHeaderPageType @unique
  criadoEm     DateTime              @default(now())
  atualizadoEm DateTime              @updatedAt
}

// =============================================
// ENUMS EXISTENTES
// =============================================

enum TiposDeUsuarios {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum Roles {
  ADMIN
  MODERADOR
  FINANCEIRO
  PROFESSOR
  EMPRESA
  PEDAGOGICO
  RECRUTADOR
  PSICOLOGO
  ALUNO_CANDIDATO
}

enum Status {
  ATIVO
  INATIVO
  BANIDO
  PENDENTE
  SUSPENSO
}

enum TiposDeEmails {
  BOAS_VINDAS
  RECUPERACAO_SENHA
  VERIFICACAO_EMAIL
  NOTIFICACAO_SISTEMA
}

enum StatusEmail {
  ENVIADO
  FALHA
  PENDENTE
}

enum TipoSMS {
  VERIFICACAO
  NOTIFICACAO
  MARKETING
}

enum StatusSMS {
  ENVIADO
  FALHA
  PENDENTE
}

// Métodos de pagamento aceitos para planos

enum WebsiteSlidersOrientations {
  DESKTOP
  TABLET_MOBILE
}

enum WebsiteStatus {
  PUBLICADO
  RASCUNHO
}

enum WebsiteHeaderPageType {
  SOBRE
  RECRUTAMENTO
  VAGAS
  TREINAMENTO
  CONTATO
  BLOG
  CURSOS
  POLITICA_PRIVACIDADE
  OUVIDORIA
}

// ===============================
// ENUMS DE PAGAMENTOS
// ===============================

enum STATUS_PAGAMENTO {
  PENDENTE
  EM_PROCESSAMENTO
  APROVADO
  CONCLUIDO
  RECUSADO
  ESTORNADO
  CANCELADO
}

enum MODELO_PAGAMENTO {
  ASSINATURA
  PAGAMENTO_UNICO
  PAGAMENTO_PARCELADO
}

enum METODO_PAGAMENTO {
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
  BOLETO
  TRANSFERENCIA
  DINHEIRO
}
