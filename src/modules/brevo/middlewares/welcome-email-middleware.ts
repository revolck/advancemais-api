import { Request, Response, NextFunction } from "express";
import { EmailService } from "../services/email-service";

/**
 * Middleware robusto para envio de email de boas-vindas
 *
 * Responsabilidades:
 * - Enviar email de forma ass√≠ncrona e n√£o-bloqueante
 * - Nunca falhar o processo de registro
 * - Logs detalhados para debugging
 * - Valida√ß√£o rigorosa de dados
 *
 * @author Sistema AdvanceMais
 * @version 5.0.2 - Corre√ß√£o de tipagem TypeScript
 */
export class WelcomeEmailMiddleware {
  private emailService: EmailService;

  constructor() {
    this.emailService = new EmailService();
  }

  /**
   * Middleware principal - robusto e com logs detalhados
   */
  public sendWelcomeEmail = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    // CORRE√á√ÉO: Garantir que correlationId seja sempre string
    const rawCorrelationId = req.headers["x-correlation-id"];
    const correlationId: string = Array.isArray(rawCorrelationId)
      ? rawCorrelationId[0] || "unknown"
      : rawCorrelationId || "unknown";

    try {
      console.log(
        `üìß [${correlationId}] WelcomeEmailMiddleware: Iniciando processamento`
      );

      // Verifica se a resposta j√° foi enviada
      if (res.headersSent) {
        console.log(
          `üìß [${correlationId}] Headers j√° enviados, processando email em background`
        );
      }

      // Extrai dados do usu√°rio
      const userData = this.extractUserData(res, correlationId);

      if (userData) {
        console.log(
          `üìß [${correlationId}] Dados extra√≠dos com sucesso para: ${userData.email}`
        );

        // Execu√ß√£o ass√≠ncrona sem await para n√£o bloquear
        this.processEmailAsync(userData, correlationId);

        console.log(
          `üìß [${correlationId}] Email de boas-vindas agendado para: ${userData.email}`
        );
      } else {
        console.warn(
          `‚ö†Ô∏è [${correlationId}] Dados insuficientes para email de boas-vindas`
        );
        console.warn(
          `‚ö†Ô∏è [${correlationId}] res.locals dispon√≠vel:`,
          Object.keys(res.locals)
        );
      }
    } catch (error) {
      console.error(
        `‚ùå [${correlationId}] Erro no middleware de email:`,
        error
      );
      // Nunca falha o fluxo principal
    }

    // SEMPRE continua o fluxo, mesmo se houver erro
    next();
  };

  /**
   * Extrai dados do usu√°rio de forma segura com logs detalhados
   */
  private extractUserData(res: Response, correlationId: string): any {
    try {
      console.log(`üîç [${correlationId}] Extraindo dados do res.locals`);

      if (!res.locals) {
        console.warn(`‚ö†Ô∏è [${correlationId}] res.locals n√£o existe`);
        return null;
      }

      if (!res.locals.usuarioCriado) {
        console.warn(
          `‚ö†Ô∏è [${correlationId}] res.locals.usuarioCriado n√£o existe`
        );
        console.log(
          `üîç [${correlationId}] res.locals keys:`,
          Object.keys(res.locals)
        );
        return null;
      }

      const usuarioCriado = res.locals.usuarioCriado;
      console.log(`üîç [${correlationId}] usuarioCriado encontrado:`, {
        hasUsuario: !!usuarioCriado.usuario,
        source: usuarioCriado.source,
        emailShouldBeSent: usuarioCriado.emailShouldBeSent,
      });

      const userData = usuarioCriado.usuario;

      if (!userData) {
        console.warn(`‚ö†Ô∏è [${correlationId}] usuarioCriado.usuario n√£o existe`);
        return null;
      }

      // Valida√ß√£o rigorosa dos campos obrigat√≥rios
      const requiredFields = ["id", "email", "nomeCompleto"];
      const missingFields = requiredFields.filter((field) => !userData[field]);

      if (missingFields.length > 0) {
        console.warn(
          `‚ö†Ô∏è [${correlationId}] Campos obrigat√≥rios ausentes:`,
          missingFields
        );
        return null;
      }

      // Valida√ß√£o de email
      if (!this.isValidEmail(userData.email)) {
        console.warn(`‚ö†Ô∏è [${correlationId}] Email inv√°lido: ${userData.email}`);
        return null;
      }

      const processedData = {
        id: userData.id,
        email: userData.email.toLowerCase().trim(),
        nomeCompleto: userData.nomeCompleto.trim(),
        tipoUsuario: userData.tipoUsuario || "PESSOA_FISICA",
      };

      console.log(`‚úÖ [${correlationId}] Dados v√°lidos extra√≠dos:`, {
        id: processedData.id,
        email: processedData.email,
        nomeCompleto: processedData.nomeCompleto,
        tipoUsuario: processedData.tipoUsuario,
      });

      return processedData;
    } catch (error) {
      console.error(`‚ùå [${correlationId}] Erro ao extrair dados:`, error);
      return null;
    }
  }

  /**
   * Processa email de forma completamente ass√≠ncrona com logs detalhados
   */
  private processEmailAsync(userData: any, correlationId: string): void {
    // Usa setImmediate para garantir execu√ß√£o ass√≠ncrona
    setImmediate(async () => {
      try {
        console.log(
          `üìß [${correlationId}] Iniciando envio ass√≠ncrono de email para: ${userData.email}`
        );

        const startTime = Date.now();
        const result = await this.emailService.sendWelcomeEmail(userData);
        const duration = Date.now() - startTime;

        if (result.success) {
          if (result.simulated) {
            console.log(
              `üé≠ [${correlationId}] Email simulado enviado para: ${userData.email} (${duration}ms)`
            );
          } else {
            console.log(
              `‚úÖ [${correlationId}] Email de boas-vindas enviado: ${userData.email} (${duration}ms)`
            );
            console.log(
              `üìß [${correlationId}] Message ID: ${result.messageId}`
            );
          }
        } else {
          console.error(
            `‚ùå [${correlationId}] Falha no email para ${userData.email}: ${result.error}`
          );
        }
      } catch (error) {
        console.error(
          `‚ùå [${correlationId}] Erro cr√≠tico no email ass√≠ncrono para ${userData.email}:`,
          error instanceof Error ? error.message : error
        );
      }
    });
  }

  /**
   * Valida formato de email
   */
  private isValidEmail(email: string): boolean {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  /**
   * Factory method com logs aprimorados
   */
  public static create() {
    console.log("üè≠ WelcomeEmailMiddleware: Criando inst√¢ncia do middleware");
    const instance = new WelcomeEmailMiddleware();
    return instance.sendWelcomeEmail;
  }
}
