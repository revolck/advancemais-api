import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import helmet from 'helmet'; // üîß CORRE√á√ÉO: Import sem asterisco
import { AppModule } from './app.module';

async function bootstrap() {
  const logger = new Logger('Bootstrap');

  // üèóÔ∏è Criar aplica√ß√£o NestJS
  const app = await NestFactory.create(AppModule, {
    logger: ['error', 'warn', 'log', 'debug', 'verbose'],
  });

  // üìã Obter configura√ß√µes
  const configService = app.get(ConfigService);
  const port = configService.get('app.port') || 3000;
  const environment = configService.get('app.environment') || 'development';
  const corsOrigins = configService.get('cors.origin') || [
    'http://localhost:3000',
  ];

  // üõ°Ô∏è Configura√ß√µes de seguran√ßa com Helmet
  app.use(
    helmet({
      contentSecurityPolicy: environment === 'production',
      crossOriginEmbedderPolicy: false,
    }),
  );

  // üåê CORS configurado para desenvolvimento e produ√ß√£o
  app.enableCors({
    origin: corsOrigins,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
  });

  // ‚úÖ Valida√ß√£o global com class-validator
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
      validateCustomDecorators: true,
      disableErrorMessages: environment === 'production',
    }),
  );

  // üåç Prefixo global para todas as rotas
  app.setGlobalPrefix('api/v1');

  // üöÄ Iniciar servidor
  await app.listen(port);

  // üìã Logs de inicializa√ß√£o
  logger.log(`üöÄ Aplica√ß√£o iniciada no ambiente: ${environment}`);
  logger.log(`üåê Servidor rodando na porta: ${port}`);
  logger.log(`üìç URL da API: http://localhost:${port}/api/v1`);
  logger.log(`üîê Autentica√ß√£o JWT configurada`);
  logger.log(`üõ°Ô∏è Rate limiting ativo`);
  logger.log(`üóÑÔ∏è Banco PostgreSQL conectado`);

  if (environment === 'development') {
    logger.log(`üìä Prisma Studio: npx prisma studio`);
  }
}

// üö® Tratamento de erros n√£o capturados
bootstrap().catch((error) => {
  console.error('‚ùå Erro cr√≠tico ao iniciar aplica√ß√£o:', error);
  process.exit(1);
});
