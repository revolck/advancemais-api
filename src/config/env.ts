import dotenv from 'dotenv';
import { logger } from '@/utils/logger';

// Carrega as vari√°veis de ambiente o mais cedo poss√≠vel
dotenv.config();

/**
 * Configura√ß√µes de ambiente centralizadas e validadas
 * Implementa padr√µes de microservi√ßos para configura√ß√£o segura
 *
 * Caracter√≠sticas:
 * - Valida√ß√£o rigorosa de vari√°veis obrigat√≥rias
 * - Configura√ß√£o espec√≠fica por ambiente
 * - Valida√ß√µes de seguran√ßa para produ√ß√£o
 * - Logs estruturados de configura√ß√£o
 * - Fallbacks seguros para desenvolvimento
 *
 * @author Sistema Advance+
 * @version 4.0.0 - Refatora√ß√£o para microservi√ßos
 */

// =============================================
// CLASSES DE VALIDA√á√ÉO
// =============================================

class EnvironmentValidator {
  /**
   * Valida vari√°veis obrigat√≥rias com feedback detalhado
   */
  static validateRequired(vars: string[]): {
    isValid: boolean;
    missing: string[];
  } {
    const missing = vars.filter((varName) => !process.env[varName]);
    return {
      isValid: missing.length === 0,
      missing,
    };
  }

  /**
   * Valida formato de URL
   */
  static isValidUrl(url: string): boolean {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * Valida formato de email
   */
  static isValidEmail(email: string): boolean {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  /**
   * Valida se √© n√∫mero v√°lido
   */
  static isValidNumber(value: string, min?: number, max?: number): boolean {
    const num = parseInt(value, 10);
    if (isNaN(num)) return false;
    if (min !== undefined && num < min) return false;
    if (max !== undefined && num > max) return false;
    return true;
  }
}

// =============================================
// CONFIGURA√á√ÉO DO AMBIENTE
// =============================================

const NODE_ENV = process.env.NODE_ENV || 'development';
const isDevelopment = NODE_ENV === 'development';
const isProduction = NODE_ENV === 'production';
const isTest = NODE_ENV === 'test';

const envLogger = logger.child({ module: 'EnvironmentConfig', environment: NODE_ENV });

envLogger.info({ nodeEnv: NODE_ENV }, 'üåç Ambiente configurado');

// =============================================
// VALIDA√á√ÉO DE VARI√ÅVEIS CR√çTICAS
// =============================================

// Vari√°veis obrigat√≥rias para todos os ambientes
const coreRequiredVars = ['DATABASE_URL', 'DIRECT_URL', 'JWT_SECRET', 'JWT_REFRESH_SECRET'];

// Valida√ß√£o espec√≠fica por ambiente
const environmentSpecificVars = {
  production: [
    ...coreRequiredVars,
    'SUPABASE_URL',
    'SUPABASE_KEY',
    'BREVO_API_KEY',
    'FRONTEND_URL',
  ],
  development: coreRequiredVars,
  test: coreRequiredVars,
};

// Valida vari√°veis obrigat√≥rias
const requiredVars =
  environmentSpecificVars[NODE_ENV as keyof typeof environmentSpecificVars] || coreRequiredVars;
const validation = EnvironmentValidator.validateRequired(requiredVars);

if (!validation.isValid) {
  const missingVars = validation.missing.join(', ');
  const errorMessage = `Vari√°veis de ambiente obrigat√≥rias n√£o encontradas para ${NODE_ENV}: ${missingVars}`;

  if (isProduction) {
    envLogger.error({ missing: validation.missing }, `‚ùå ${errorMessage}`);
    process.exit(1); // Falha cr√≠tica em produ√ß√£o
  } else {
    envLogger.warn({ missing: validation.missing }, `‚ö†Ô∏è ${errorMessage}`);
    envLogger.warn('‚ö†Ô∏è Alguns m√≥dulos podem n√£o funcionar corretamente');
  }
}

// =============================================
// CONFIGURA√á√ïES DO SUPABASE
// =============================================

export const supabaseConfig = {
  url: process.env.SUPABASE_URL || '',
  key: process.env.SUPABASE_KEY || '',
  jwksUri:
    process.env.SUPABASE_JWKS_URI || `${process.env.SUPABASE_URL}/auth/v1/.well-known/jwks.json`,

  // Valida√ß√£o da configura√ß√£o
  isValid(): boolean {
    return !!(this.url && this.key && EnvironmentValidator.isValidUrl(this.url));
  },

  // Status da configura√ß√£o
  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];

    if (!this.url) issues.push('SUPABASE_URL n√£o configurada');
    if (!this.key) issues.push('SUPABASE_KEY n√£o configurada');
    if (this.url && !EnvironmentValidator.isValidUrl(this.url)) {
      issues.push('SUPABASE_URL tem formato inv√°lido');
    }

    return {
      configured: issues.length === 0,
      issues,
    };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES JWT
// =============================================

export const jwtConfig = {
  secret: process.env.JWT_SECRET || '',
  refreshSecret: process.env.JWT_REFRESH_SECRET || '',
  expiresIn: (process.env.JWT_EXPIRATION || '1h') as string,
  refreshExpiresIn: (process.env.JWT_REFRESH_EXPIRATION || '30d') as string,

  // Valida√ß√£o da configura√ß√£o
  isValid(): boolean {
    return (
      !!(this.secret && this.refreshSecret) &&
      this.secret.length >= 32 &&
      this.refreshSecret.length >= 32
    );
  },

  // Status da configura√ß√£o
  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];

    if (!this.secret) issues.push('JWT_SECRET n√£o configurado');
    if (!this.refreshSecret) issues.push('JWT_REFRESH_SECRET n√£o configurado');
    if (this.secret && this.secret.length < 32) {
      issues.push('JWT_SECRET deve ter pelo menos 32 caracteres');
    }
    if (this.refreshSecret && this.refreshSecret.length < 32) {
      issues.push('JWT_REFRESH_SECRET deve ter pelo menos 32 caracteres');
    }

    return {
      configured: issues.length === 0,
      issues,
    };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES DO BREVO
// =============================================

export const brevoConfig = {
  // Configura√ß√µes b√°sicas
  apiKey: process.env.BREVO_API_KEY || '',
  fromEmail: process.env.BREVO_FROM_EMAIL || 'noreply@advancemais.com',
  fromName: process.env.BREVO_FROM_NAME || 'Advance+',

  // Configura√ß√µes SMTP (backup)
  smtp: {
    host: process.env.BREVO_SMTP_HOST || 'smtp-relay.brevo.com',
    port: parseInt(process.env.BREVO_SMTP_PORT || '587', 10),
    secure: false, // true para 465, false para 587
    auth: {
      user: process.env.BREVO_SMTP_USER || '',
      pass: process.env.BREVO_SMTP_PASSWORD || '',
    },
    connectionTimeout: 60000,
    greetingTimeout: 30000,
    socketTimeout: 60000,
  },

  // URLs da API
  apiUrls: {
    base: 'https://api.brevo.com/v3',
    email: 'https://api.brevo.com/v3/smtp/email',
    sms: 'https://api.brevo.com/v3/transactionalSMS',
    account: 'https://api.brevo.com/v3/account',
  },

  // Configura√ß√µes de recupera√ß√£o de senha
  passwordRecovery: {
    tokenExpirationMinutes:
      parseInt(process.env.BREVO_PASSWORD_RECOVERY_EXPIRATION_HOURS || '72', 10) * 60,
    maxAttempts: parseInt(process.env.BREVO_PASSWORD_RECOVERY_MAX_ATTEMPTS || '3', 10),
    cooldownMinutes: parseInt(process.env.BREVO_PASSWORD_RECOVERY_COOLDOWN_MINUTES || '15', 10),
  },

  // Configura√ß√µes de envio
  sending: {
    maxRetries: parseInt(process.env.BREVO_MAX_RETRIES || '3', 10),
    retryDelay: parseInt(process.env.BREVO_RETRY_DELAY || '1000', 10),
    timeout: parseInt(process.env.BREVO_TIMEOUT || '30000', 10),

    // Limites di√°rios (ajuste conforme seu plano)
    dailyEmailLimit: parseInt(process.env.BREVO_DAILY_EMAIL_LIMIT || '10000', 10),
    dailySMSLimit: parseInt(process.env.BREVO_DAILY_SMS_LIMIT || '1000', 10),

    // Configura√ß√µes de SMS
    defaultSMSSender: process.env.BREVO_SMS_SENDER || 'Advance+',
    smsUnicodeEnabled: process.env.BREVO_SMS_UNICODE === 'true',
  },

  // Configura√ß√µes de template
  templates: {
    cacheEnabled: process.env.BREVO_TEMPLATE_CACHE !== 'false',
    preloadOnStart: process.env.BREVO_PRELOAD_TEMPLATES !== 'false',
    customTemplateDir: process.env.BREVO_CUSTOM_TEMPLATE_DIR || '',
  },

  // Valida√ß√£o da configura√ß√£o
  isValid(): boolean {
    return !!(this.apiKey && EnvironmentValidator.isValidEmail(this.fromEmail));
  },

  // Status da configura√ß√£o
  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];

    if (!this.apiKey) issues.push('BREVO_API_KEY n√£o configurado');
    if (!EnvironmentValidator.isValidEmail(this.fromEmail)) {
      issues.push('BREVO_FROM_EMAIL deve ser um email v√°lido');
    }

    // Verifica se n√£o est√° usando credenciais de desenvolvimento em produ√ß√£o
    if (isProduction) {
      if (this.fromEmail.includes('test') || this.fromEmail.includes('dev')) {
        issues.push('Email de produ√ß√£o parece ser de desenvolvimento');
      }
    }

    return {
      configured: issues.length === 0,
      issues,
    };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES DO MERCADO PAGO (ASSINATURAS/PAGAMENTOS)
// =============================================

export const mercadopagoConfig = {
  // Dados da aplica√ß√£o/conta
  userId: process.env.MP_USER_ID || '',
  applicationId: process.env.MP_APPLICATION_ID || '',
  webhookSecret: process.env.MP_WEBHOOK_SECRET || '',

  // Credenciais de teste
  test: {
    publicKey: process.env.MP_TEST_PUBLIC_KEY || '',
    accessToken: process.env.MP_TEST_ACCESS_TOKEN || '',
  },

  // Credenciais de produ√ß√£o
  prod: {
    publicKey: process.env.MP_PUBLIC_KEY || '',
    accessToken: process.env.MP_ACCESS_TOKEN || '',
    clientId: process.env.MP_CLIENT_ID || '',
    clientSecret: process.env.MP_CLIENT_SECRET || '',
  },

  // URLs de retorno do Checkout Pro
  returnUrls: {
    success: process.env.MP_RETURN_SUCCESS_URL || '',
    failure: process.env.MP_RETURN_FAILURE_URL || '',
    pending: process.env.MP_RETURN_PENDING_URL || '',
  },

  // Retorna o access token priorit√°rio (produ√ß√£o > teste)
  getAccessToken(): string {
    return this.prod.accessToken || this.test.accessToken || '';
  },

  // Retorna a public key priorit√°ria (produ√ß√£o > teste)
  getPublicKey(): string {
    return this.prod.publicKey || this.test.publicKey || '';
  },

  isConfiguredForPayments(): boolean {
    return !!this.getAccessToken();
  },

  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];
    if (!this.getAccessToken()) issues.push('MP_ACCESS_TOKEN/MP_TEST_ACCESS_TOKEN n√£o configurado');
    if (!this.getPublicKey()) issues.push('MP_PUBLIC_KEY/MP_TEST_PUBLIC_KEY n√£o configurado');
    if (!this.returnUrls.success) issues.push('MP_RETURN_SUCCESS_URL n√£o configurado');
    if (!this.returnUrls.failure) issues.push('MP_RETURN_FAILURE_URL n√£o configurado');
    if (!this.returnUrls.pending) issues.push('MP_RETURN_PENDING_URL n√£o configurado');
    return { configured: issues.length === 0, issues };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES DO SERVIDOR
// =============================================

export const serverConfig = {
  port: parseInt(process.env.PORT || '3000', 10),
  nodeEnv: NODE_ENV,
  corsOrigin: (() => {
    const defaultOrigins = [
      'https://advancemais.com',
      'https://auth.advancemais.com',
      'https://app.advancemais.com',
    ];

    if (process.env.CORS_ORIGIN) {
      const envOrigins = process.env.CORS_ORIGIN.split(',')
        .map((o) => o.trim())
        .filter(Boolean);
      if (envOrigins.length > 0) {
        return Array.from(new Set([...envOrigins, ...defaultOrigins]));
      }
    }

    return isDevelopment ? '*' : defaultOrigins;
  })(),
  frontendUrl: process.env.FRONTEND_URL || 'http://localhost:3000',
  enableCompression: process.env.ENABLE_COMPRESSION !== 'false',

  // Valida√ß√£o da configura√ß√£o
  isValid(): boolean {
    return (
      EnvironmentValidator.isValidNumber(this.port.toString(), 1, 65535) &&
      EnvironmentValidator.isValidUrl(this.frontendUrl)
    );
  },

  // Status da configura√ß√£o
  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];

    if (!EnvironmentValidator.isValidNumber(this.port.toString(), 1, 65535)) {
      issues.push('PORT deve ser um n√∫mero v√°lido entre 1 e 65535');
    }
    if (!EnvironmentValidator.isValidUrl(this.frontendUrl)) {
      issues.push('FRONTEND_URL deve ser uma URL v√°lida');
    }

    return {
      configured: issues.length === 0,
      issues,
    };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES DE BANCO DE DADOS
// =============================================

export const databaseConfig = {
  // Allow overriding the connection string with an IPv4 friendly version
  url: process.env.DATABASE_POOL_URL || process.env.DATABASE_URL || '',
  directUrl: process.env.DIRECT_POOL_URL || process.env.DIRECT_URL || '',

  // Valida√ß√£o da configura√ß√£o
  isValid(): boolean {
    return !!(this.url && this.directUrl);
  },

  // Status da configura√ß√£o
  getStatus(): { configured: boolean; issues: string[] } {
    const issues: string[] = [];

    if (!this.url) issues.push('DATABASE_URL/DATABASE_POOL_URL n√£o configurada');
    if (!this.directUrl) issues.push('DIRECT_URL/DIRECT_POOL_URL n√£o configurada');

    return {
      configured: issues.length === 0,
      issues,
    };
  },
} as const;

// =============================================
// CONFIGURA√á√ïES AUXILIARES
// =============================================

export const securityConfig = {
  bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS || '12', 10),
  sessionSecret: process.env.SESSION_SECRET || 'default-session-secret-change-in-production',
  cookieMaxAge: parseInt(process.env.COOKIE_MAX_AGE || '86400000', 10),
} as const;

export const rateLimitConfig = {
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10),
  maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10),
} as const;

export const uploadConfig = {
  maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10),
  allowedMimeTypes: (
    process.env.ALLOWED_MIME_TYPES || 'image/jpeg,image/png,image/gif,application/pdf'
  ).split(','),
} as const;

export const logConfig = {
  level: process.env.LOG_LEVEL || (isDevelopment ? 'debug' : 'info'),
  enableConsole: process.env.ENABLE_CONSOLE_LOG !== 'false',
  enableFile: process.env.ENABLE_FILE_LOG === 'true',
} as const;

// =============================================
// VALIDA√á√ÉO GERAL DA CONFIGURA√á√ÉO
// =============================================

/**
 * Classe para valida√ß√£o centralizada de todas as configura√ß√µes
 */
export class ConfigurationManager {
  /**
   * Valida todas as configura√ß√µes
   */
  static validateAll(): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
    modules: Record<string, { configured: boolean; issues: string[] }>;
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    const modules = {
      server: serverConfig.getStatus(),
      database: databaseConfig.getStatus(),
      supabase: supabaseConfig.getStatus(),
      jwt: jwtConfig.getStatus(),
      brevo: brevoConfig.getStatus(),
      mercadopago: mercadopagoConfig.getStatus(),
    };

    // Coleta erros e warnings
    Object.entries(modules).forEach(([moduleName, status]) => {
      if (!status.configured) {
        if (['server', 'database', 'jwt'].includes(moduleName)) {
          errors.push(`M√≥dulo cr√≠tico ${moduleName}: ${status.issues.join(', ')}`);
        } else {
          warnings.push(`M√≥dulo ${moduleName}: ${status.issues.join(', ')}`);
        }
      }
    });

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      modules,
    };
  }

  /**
   * Executa valida√ß√£o com logs estruturados
   */
  static validateWithLogging(): boolean {
    const result = this.validateAll();
    const log = envLogger.child({ context: 'ConfigurationManager' });

    if (result.errors.length > 0) {
      log.error({ errors: result.errors }, '‚ùå Erros cr√≠ticos de configura√ß√£o');

      if (isProduction) {
        log.error('üö® Aplica√ß√£o n√£o pode iniciar em produ√ß√£o com erros cr√≠ticos');
        process.exit(1);
      }
    }

    if (result.warnings.length > 0) {
      log.warn({ warnings: result.warnings }, '‚ö†Ô∏è Avisos de configura√ß√£o');
    }

    // Log de m√≥dulos configurados
    const configuredModules = Object.entries(result.modules)
      .filter(([_, status]) => status.configured)
      .map(([name]) => name);

    if (configuredModules.length > 0) {
      log.info({ modules: configuredModules }, '‚úÖ M√≥dulos configurados');
    }

    return result.isValid;
  }
}

// =============================================
// HELPERS DE AMBIENTE
// =============================================

export { isDevelopment, isProduction, isTest };

// =============================================
// CONFIGURA√á√ÉO CONSOLIDADA
// =============================================

export const appConfig = {
  server: serverConfig,
  database: databaseConfig,
  supabase: supabaseConfig,
  jwt: jwtConfig,
  brevo: brevoConfig,
  security: securityConfig,
  rateLimit: rateLimitConfig,
  upload: uploadConfig,
  log: logConfig,
  environment: {
    isDevelopment,
    isProduction,
    isTest,
    nodeEnv: NODE_ENV,
  },
} as const;

// =============================================
// EXECU√á√ÉO DE VALIDA√á√ÉO
// =============================================

// Executa valida√ß√£o na inicializa√ß√£o
const isConfigValid = ConfigurationManager.validateWithLogging();

if (isDevelopment && !isConfigValid) {
  envLogger.warn('‚ö†Ô∏è Configura√ß√£o incompleta - alguns recursos podem n√£o funcionar');
}

export default appConfig;
