generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id            String      @id @default(uuid())
  nomeCompleto  String
  supabaseId    String      @unique
  cpf           String?     @unique
  cnpj          String?     @unique
  dataNasc      DateTime?
  telefone      String
  genero        String?
  email         String      @unique
  senha         String
  matricula     String?
  codEmpresa    String?
  tipoUsuario   TipoUsuario
  role          Role
  status        Status      @default(ATIVO)
  aceitarTermos Boolean     @default(false)
  criadoEm      DateTime    @default(now())
  atualizadoEm  DateTime    @updatedAt
  ultimoLogin   DateTime?
  refreshToken  String?
  
  // CAMPOS PARA RECUPERAÇÃO DE SENHA
  tokenRecuperacao           String?   
  tokenRecuperacaoExp        DateTime? 
  tentativasRecuperacao      Int       @default(0)
  ultimaTentativaRecuperacao DateTime?
  
  // CAMPOS PARA VERIFICAÇÃO DE EMAIL (NOVOS)
  emailVerificado              Boolean   @default(false)
  emailVerificadoEm            DateTime?
  emailVerificationToken       String?   @unique
  emailVerificationTokenExp    DateTime?
  emailVerificationAttempts    Int       @default(0)
  ultimaTentativaVerificacao   DateTime?

  // RELACIONAMENTOS EXISTENTES
  enderecos     Endereco[]
  empresa       Empresa?    @relation(fields: [codEmpresa], references: [id])
  codigoUsuario CodigoUsuario?
  
  // RELACIONAMENTOS COM MERCADOPAGO
  mercadoPagoOrders             MercadoPagoOrder[]
  mercadoPagoRefunds            MercadoPagoRefund[]
  mercadoPagoSubscriptions      MercadoPagoSubscription[]
  mercadoPagoSubscriptionPayments MercadoPagoSubscriptionPayment[]
  mercadoPagoTransactions       MercadoPagoTransaction[]
  auditLogs                     AuditLog[]
  
  @@index([tokenRecuperacao])
  @@index([emailVerificationToken])
}

model Empresa {
  id       String    @id @default(uuid())
  nome     String
  criadoEm DateTime  @default(now())
  usuarios Usuario[]
  planos   EmpresaPlano[]
  auditLogs AuditLog[]
}

model Endereco {
  id           String   @id @default(uuid())
  usuarioId    String
  logradouro   String
  numero       String
  bairro       String
  cidade       String
  estado       String
  cep          String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
}

model LogEmail {
  id          String      @id @default(uuid())
  usuarioId   String?
  email       String
  tipoEmail   TipoEmail
  status      StatusEmail
  tentativas  Int         @default(1)
  erro        String?
  messageId   String?
  criadoEm    DateTime    @default(now())
  atualizadoEm DateTime   @updatedAt

  @@index([usuarioId])
  @@index([email])
  @@index([tipoEmail])
  @@index([criadoEm])
}

model LogSMS {
  id          String    @id @default(uuid())
  usuarioId   String?
  telefone    String
  tipoSMS     TipoSMS
  status      StatusSMS
  tentativas  Int       @default(1)
  erro        String?
  messageId   String?
  criadoEm    DateTime  @default(now())
  atualizadoEm DateTime @updatedAt

  @@index([usuarioId])
  @@index([telefone])
  @@index([tipoSMS])
  @@index([criadoEm])
}

model CodigoUsuario {
  codigo    Int        @id @default(autoincrement())
  usuarioId String     @unique
  tipo      CodigoTipo @default(USUARIO)
  criadoEm  DateTime   @default(now())

  usuario   Usuario    @relation(fields: [usuarioId], references: [id])

  @@map("codigo_usuario")
}

// =============================================
// MODELOS DO MERCADOPAGO
// =============================================

// Modelo para Orders do MercadoPago
model MercadoPagoOrder {
  id                    String   @id @default(uuid())
  mercadoPagoOrderId    String   @unique // ID da order no MercadoPago
  usuarioId             String   // Referência ao usuário que criou a order
  status                String   // Status da order (opened, closed, cancelled, expired)
  totalAmount           Float    // Valor total da order
  paidAmount            Float    @default(0) // Valor pago
  refundedAmount        Float    @default(0) // Valor reembolsado
  cancelledAmount       Float    @default(0) // Valor cancelado
  externalReference     String?  // Referência externa (geralmente userId)
  processingMode        String   // automatic ou manual
  type                  String   @default("online") // online ou offline
  preferenceId          String?  // ID da preferência se houver
  
  // Dados completos da order em JSON
  orderData             Json
  
  // Metadados adicionais
  metadata              Json?
  
  // Timestamps
  criadoEm              DateTime @default(now())
  atualizadoEm          DateTime @updatedAt
  dateCreated           DateTime? // Data de criação no MercadoPago
  dateClosed            DateTime? // Data de fechamento no MercadoPago
  dateLastUpdated       DateTime? // Última atualização no MercadoPago
  
  // Relacionamentos
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  refunds               MercadoPagoRefund[]
  
  @@index([usuarioId])
  @@index([status])
  @@index([externalReference])
  @@index([criadoEm])
  @@map("mercadopago_orders")
}

// Modelo para Reembolsos do MercadoPago
model MercadoPagoRefund {
  id                    String   @id @default(uuid())
  mercadoPagoRefundId   String   @unique // ID do reembolso no MercadoPago
  orderId               String   // ID da order local
  paymentId             String   // ID do pagamento no MercadoPago
  usuarioId             String   // Usuário que solicitou o reembolso
  amount                Float    // Valor do reembolso
  status                String   // Status do reembolso (pending, approved, rejected)
  reason                String?  // Motivo do reembolso
  
  // Dados completos do reembolso em JSON
  refundData            Json
  
  // Metadados adicionais
  metadata              Json?
  
  // Timestamps
  criadoEm              DateTime @default(now())
  atualizadoEm          DateTime @updatedAt
  dateCreated           DateTime? // Data de criação no MercadoPago
  
  // Relacionamentos
  order                 MercadoPagoOrder @relation(fields: [orderId], references: [mercadoPagoOrderId])
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  
  @@index([orderId])
  @@index([paymentId])
  @@index([usuarioId])
  @@index([status])
  @@index([criadoEm])
  @@map("mercadopago_refunds")
}

// Modelo para Assinaturas do MercadoPago
model MercadoPagoSubscription {
  id                        String   @id @default(uuid())
  mercadoPagoSubscriptionId String   @unique // ID da assinatura no MercadoPago
  usuarioId                 String   // Usuário proprietário da assinatura
  status                    String   // Status da assinatura (pending, authorized, paused, cancelled)
  reason                    String   // Descrição/motivo da assinatura
  payerEmail                String   // Email do pagador
  
  // Dados da recorrência
  transactionAmount         Float    // Valor da transação
  frequency                 Int      // Frequência (número)
  frequencyType             String   // Tipo da frequência (days, months)
  repetitions               Int?     // Número de repetições (null = infinito)
  
  // Datas importantes
  nextPaymentDate           DateTime? // Data do próximo pagamento
  startDate                 DateTime? // Data de início
  endDate                   DateTime? // Data de fim (se houver)
  
  // Referências
  externalReference         String?  // Referência externa
  preapprovalPlanId         String?  // ID do plano se baseado em plano
  
  // Dados completos da assinatura em JSON
  subscriptionData          Json
  
  // Metadados adicionais
  metadata                  Json?
  
  // Timestamps
  criadoEm                  DateTime @default(now())
  atualizadoEm              DateTime @updatedAt
  dateCreated               DateTime? // Data de criação no MercadoPago
  lastModified              DateTime? // Última modificação no MercadoPago
  
  // Relacionamentos
  usuario                   Usuario  @relation(fields: [usuarioId], references: [id])
  payments                  MercadoPagoSubscriptionPayment[]
  
  @@index([usuarioId])
  @@index([status])
  @@index([payerEmail])
  @@index([nextPaymentDate])
  @@index([criadoEm])
  @@map("mercadopago_subscriptions")
}

// Modelo para Pagamentos de Assinatura
model MercadoPagoSubscriptionPayment {
  id                    String   @id @default(uuid())
  subscriptionId        String   // ID da assinatura local
  mercadoPagoPaymentId  String   @unique // ID do pagamento no MercadoPago
  usuarioId             String   // Usuário da assinatura
  amount                Float    // Valor do pagamento
  status                String   // Status do pagamento
  statusDetail          String?  // Detalhe do status
  
  // Datas
  dateCreated           DateTime? // Data de criação no MercadoPago
  dateApproved          DateTime? // Data de aprovação
  dateLastUpdated       DateTime? // Última atualização
  
  // Dados completos do pagamento em JSON
  paymentData           Json
  
  // Timestamps
  criadoEm              DateTime @default(now())
  atualizadoEm          DateTime @updatedAt
  
  // Relacionamentos
  subscription          MercadoPagoSubscription @relation(fields: [subscriptionId], references: [mercadoPagoSubscriptionId])
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  
  @@index([subscriptionId])
  @@index([usuarioId])
  @@index([status])
  @@index([dateCreated])
  @@map("mercadopago_subscription_payments")
}

// Modelo para Webhooks do MercadoPago
model MercadoPagoWebhook {
  id            String   @id @default(uuid())
  webhookId     String   @unique // ID do webhook recebido
  type          String   // Tipo do webhook (payment, subscription, etc.)
  action        String   // Ação do webhook (created, updated, etc.)
  dataId        String   // ID do recurso afetado
  liveMode      Boolean  @default(true) // Se é webhook de produção
  
  // Dados completos do webhook em JSON
  webhookData   Json
  
  // Status do processamento
  processed     Boolean  @default(false) // Se foi processado
  processedAt   DateTime? // Quando foi processado
  success       Boolean? // Se o processamento foi bem-sucedido
  errorMessage  String?  // Mensagem de erro se houver
  retryCount    Int      @default(0) // Número de tentativas de processamento
  
  // Timestamps
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
  
  @@index([type])
  @@index([action])
  @@index([dataId])
  @@index([processed])
  @@index([success])
  @@index([criadoEm])
  @@map("mercadopago_webhooks")
}

// Modelo para Log de transações (opcional, para auditoria)
model MercadoPagoTransaction {
  id                    String   @id @default(uuid())
  usuarioId             String   // Usuário relacionado
  type                  String   // Tipo da transação (order, subscription, refund)
  externalId            String   // ID externo (MercadoPago)
  localId               String?  // ID local se houver
  amount                Float    // Valor da transação
  currency              String   @default("BRL") // Moeda
  status                String   // Status da transação
  description           String?  // Descrição
  
  // Dados da transação em JSON
  transactionData       Json
  
  // Timestamps
  criadoEm              DateTime @default(now())
  atualizadoEm          DateTime @updatedAt
  
  // Relacionamentos
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  
  @@index([usuarioId])
  @@index([type])
  @@index([status])
  @@index([externalId])
  @@index([criadoEm])
  @@map("mercadopago_transactions")
}

// Plano de assinaturas disponíveis para empresas
model MercadoPagoPlan {
  id          String   @id @default(uuid())
  nome        String
  valor       Float
  descricao   String
  recursos    String[]
  ativo       Boolean  @default(true)
  mercadoPagoPlanId String? @unique
  frequency   Int
  frequencyType PlanFrequencyType
  repetitions Int?
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  empresaPlanos EmpresaPlano[]

  @@map("mercadopago_plans")
}

// Associação de planos com empresas
model EmpresaPlano {
  id             String             @id @default(uuid())
  empresaId      String
  planoId        String
  metodoPagamento PlanPaymentMethod
  tipo           CompanyPlanType    @default(STANDARD)
  validade       PlanValidity?
  inicio         DateTime           @default(now())
  fim            DateTime?
  criadoEm       DateTime           @default(now())
  atualizadoEm   DateTime           @updatedAt

  empresa        Empresa            @relation(fields: [empresaId], references: [id])
  plano          MercadoPagoPlan    @relation(fields: [planoId], references: [id])

  @@index([empresaId])
  @@index([planoId])
  @@index([metodoPagamento])
  @@unique([empresaId])
  @@map("empresa_planos")
}

// Logs de auditoria para rastrear ações administrativas
model AuditLog {
  id        String   @id @default(uuid())
  usuarioId String
  empresaId String?
  acao      String
  detalhes  Json?
  criadoEm  DateTime @default(now())

  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  empresa   Empresa? @relation(fields: [empresaId], references: [id])

  @@index([usuarioId])
  @@index([empresaId])
  @@index([acao])
  @@map("audit_logs")
}

model WebsiteSobre {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteConsultoria {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  buttonUrl    String
  buttonLabel  String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteRecrutamento {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  titulo       String
  descricao    String
  buttonUrl    String
  buttonLabel  String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSobreEmpresa {
  id               String   @id @default(uuid())
  titulo           String
  descricao        String
  descricaoVisao   String
  descricaoMissao  String
  descricaoValores String
  videoUrl         String
  criadoEm         DateTime @default(now())
  atualizadoEm     DateTime @updatedAt
}

model WebsiteTeam {
  id        String   @id @default(uuid())
  photoUrl  String
  nome      String
  cargo     String
  criadoEm  DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem     WebsiteTeamOrdem?
}

model WebsiteTeamOrdem {
  id            String       @id @default(uuid())
  websiteTeamId String       @unique
  ordem         Int
  status        WebsiteStatus @default(RASCUNHO)
  criadoEm      DateTime     @default(now())

  team          WebsiteTeam  @relation(fields: [websiteTeamId], references: [id], onDelete: Cascade)

  @@unique([ordem])
}

model WebsiteDepoimento {
  id          String   @id @default(uuid())
  depoimento  String
  nome        String
  cargo       String
  fotoUrl     String
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem       WebsiteDepoimentoOrdem?
}

model WebsiteDepoimentoOrdem {
  id                   String       @id @default(uuid())
  websiteDepoimentoId  String       @unique
  ordem                Int
  status               WebsiteStatus @default(RASCUNHO)
  criadoEm             DateTime     @default(now())

  depoimento           WebsiteDepoimento @relation(fields: [websiteDepoimentoId], references: [id], onDelete: Cascade)

  @@unique([ordem])
}

model WebsiteDiferenciais {
  id           String   @id @default(uuid())
  icone1       String
  titulo1      String
  descricao1   String
  icone2       String
  titulo2      String
  descricao2   String
  icone3       String
  titulo3      String
  descricao3   String
  icone4       String
  titulo4      String
  descricao4   String
  titulo       String
  descricao    String
  botaoUrl     String
  botaoLabel   String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSlider {
  id          String   @id @default(uuid())
  sliderName  String
  imagemUrl   String
  link        String?
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem       WebsiteSliderOrdem?
}

model WebsiteSliderOrdem {
  id              String             @id @default(uuid())
  websiteSliderId String             @unique
  ordem           Int
  orientacao      SliderOrientation
  status          WebsiteStatus      @default(RASCUNHO)
  criadoEm        DateTime           @default(now())

  slider          WebsiteSlider      @relation(fields: [websiteSliderId], references: [id], onDelete: Cascade)

  @@unique([ordem, orientacao])
}

model WebsiteBanner {
  id           String   @id @default(uuid())
  imagemUrl    String
  imagemTitulo String
  link         String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem        WebsiteBannerOrdem?
}

model WebsiteBannerOrdem {
  id              String       @id @default(uuid())
  websiteBannerId String       @unique
  ordem           Int
  status          WebsiteStatus @default(RASCUNHO)
  criadoEm        DateTime     @default(now())

  banner          WebsiteBanner @relation(fields: [websiteBannerId], references: [id], onDelete: Cascade)

  @@unique([ordem])
}

model WebsiteLogoEnterprise {
  id         String   @id @default(uuid())
  nome       String
  imagemUrl  String
  imagemAlt  String
  website    String?
  criadoEm   DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  ordem      WebsiteLogoEnterpriseOrdem?
}

model WebsiteLogoEnterpriseOrdem {
  id                     String       @id @default(uuid())
  websiteLogoEnterpriseId String       @unique
  ordem                  Int
  status                 WebsiteStatus @default(RASCUNHO)
  criadoEm               DateTime     @default(now())

  logo WebsiteLogoEnterprise @relation(fields: [websiteLogoEnterpriseId], references: [id], onDelete: Cascade)

  @@unique([ordem])
}

model WebsitePlaninhas {
  id        String @id @default(uuid())
  titulo    String
  descricao String
  icone1    String
  titulo1   String
  descricao1 String
  icone2    String
  titulo2   String
  descricao2 String
  icone3    String
  titulo3   String
  descricao3 String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteAdvanceAjuda {
  id         String @id @default(uuid())
  titulo     String
  descricao  String
  imagemUrl  String
  imagemTitulo String
  titulo1    String
  descricao1 String
  titulo2    String
  descricao2 String
  titulo3    String
  descricao3 String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteRecrutamentoSelecao {
  id         String @id @default(uuid())
  titulo     String
  descricao  String
  imagemUrl  String
  imagemTitulo String
  titulo1    String
  titulo2    String
  titulo3    String
  titulo4    String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteSistema {
  id             String @id @default(uuid())
  titulo         String
  descricao      String
  subtitulo      String
  etapa1Titulo   String
  etapa1Descricao String
  etapa2Titulo   String
  etapa2Descricao String
  etapa3Titulo   String
  etapa3Descricao String
  criadoEm       DateTime @default(now())
  atualizadoEm   DateTime @updatedAt
}

model WebsiteTreinamentoCompany {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String
  imagemUrl    String
  imagemTitulo String
  titulo1      String
  titulo2      String
  titulo3      String
  titulo4      String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteConexaoForte {
  id           String @id @default(uuid())
  titulo       String
  descricao    String
  imagemUrl1   String
  imagemTitulo1 String
  imagemUrl2   String
  imagemTitulo2 String
  imagemUrl3   String
  imagemTitulo3 String
  imagemUrl4   String
  imagemTitulo4 String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteTreinamentosInCompany {
  id         String   @id @default(uuid())
  titulo     String
  icone1     String
  descricao1 String
  icone2     String
  descricao2 String
  icone3     String
  descricao3 String
  icone4     String
  descricao4 String
  icone5     String
  descricao5 String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model WebsiteInformacoes {
  id           String   @id @default(uuid())
  endereco     String?
  cep          String?
  cidade       String?
  estado       String?
  telefone1    String?
  telefone2    String?
  whatsapp     String?
  linkedin     String?
  facebook     String?
  instagram    String?
  youtube      String?
  email        String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  horarios WebsiteHorarioFuncionamento[]
}

model WebsiteHorarioFuncionamento {
  id            String   @id @default(uuid())
  diaDaSemana   String
  horarioInicio String
  horarioFim    String
  informacoes   WebsiteInformacoes @relation(fields: [informacoesId], references: [id], onDelete: Cascade)
  informacoesId String
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
}

model WebsiteHeaderPage {
  id          String               @id @default(uuid())
  subtitulo   String
  titulo      String
  descricao   String
  imagemUrl   String
  buttonLabel String
  buttonLink  String
  page        WebsiteHeaderPageType @unique
  criadoEm    DateTime              @default(now())
  atualizadoEm DateTime             @updatedAt
}

// =============================================
// ENUMS EXISTENTES
// =============================================

enum TipoUsuario {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum Role {
  ADMIN
  MODERADOR
  FINANCEIRO
  PROFESSOR
  EMPRESA
  PEDAGOGICO
  RECRUTADOR
  PSICOLOGO
  ALUNO_CANDIDATO
}

enum Status {
  ATIVO
  INATIVO
  BANIDO
  PENDENTE
  SUSPENSO
}

enum TipoEmail {
  BOAS_VINDAS
  RECUPERACAO_SENHA
  VERIFICACAO_EMAIL
  NOTIFICACAO_SISTEMA
}

enum StatusEmail {
  ENVIADO
  FALHA
  PENDENTE
}

enum TipoSMS {
  VERIFICACAO
  NOTIFICACAO
  MARKETING
}

enum StatusSMS {
  ENVIADO
  FALHA
  PENDENTE
}

enum CodigoTipo {
  USUARIO
  EMPRESA
}

// Métodos de pagamento aceitos para planos
enum PlanPaymentMethod {
  PIX
  BOLETO
  CARTAO_CREDITO
  CARTAO_DEBITO
  DINHEIRO
}

// Indica se o plano foi atribuído como padrão ou para empresa parceira
enum CompanyPlanType {
  STANDARD
  PARTNER
}

// Tipo de frequência para recorrência de planos
enum PlanFrequencyType {
  DIAS
  MESES
}

// Validades permitidas para planos atribuídos a empresas
enum PlanValidity {
  DIAS_15
  DIAS_30
  DIAS_90
  DIAS_120
  SEM_VALIDADE
}

enum SliderOrientation {
  DESKTOP
  TABLET_MOBILE
}

enum WebsiteStatus {
  PUBLICADO
  RASCUNHO
}

enum WebsiteHeaderPageType {
  SOBRE
  RECRUTAMENTO
  TREINAMENTO
  CONTATO
  BLOG
  VAGAS
  CURSOS
  POLITICA_PRIVACIDADE
  OUVIDORIA
}

