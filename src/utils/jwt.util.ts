import { SignJWT, jwtVerify } from 'jose';
import { Role, Status, TipoUsuario } from '@prisma/client';

/**
 * üé´ Interface do payload JWT
 * Cont√©m informa√ß√µes essenciais do usu√°rio para o token
 */
export interface JwtPayload {
  sub: string; // ID do usu√°rio
  email: string; // Email do usu√°rio
  tipoUsuario: TipoUsuario; // Tipo do usu√°rio (PF/PJ)
  matricula: string; // Matr√≠cula √∫nica
  role: Role; // Role do usu√°rio no sistema
  status: Status; // Status atual do usu√°rio
  iat?: number; // Issued at
  exp?: number; // Expires at
}

/**
 * üîß Utilit√°rio para manipula√ß√£o de tokens JWT
 * Utiliza a biblioteca jose para maior seguran√ßa
 */
export class JwtUtil {
  private static textEncoder = new TextEncoder();

  /**
   * üîê Gera token JWT assinado usando jose
   * @param payload - Dados do usu√°rio para incluir no token
   * @param secret - Chave secreta para assinatura
   * @param expiresIn - Tempo de expira√ß√£o (ex: '15m', '1h', '7d')
   * @returns Token JWT assinado
   */
  static async gerarToken(
    payload: Omit<JwtPayload, 'iat' | 'exp'>,
    secret: string,
    expiresIn: string = '15m',
  ): Promise<string> {
    const secretKey = this.textEncoder.encode(secret);

    return new SignJWT(payload)
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime(expiresIn)
      .sign(secretKey);
  }

  /**
   * ‚úÖ Verifica e decodifica token JWT
   * @param token - Token JWT para verificar
   * @param secret - Chave secreta para verifica√ß√£o
   * @returns Payload decodificado e validado
   */
  static async verificarToken(
    token: string,
    secret: string,
  ): Promise<JwtPayload> {
    const secretKey = this.textEncoder.encode(secret);

    try {
      const { payload } = await jwtVerify(token, secretKey);

      // üîç Validar propriedades necess√°rias e converter corretamente
      if (
        typeof payload.sub === 'string' &&
        typeof payload.email === 'string' &&
        typeof payload.tipoUsuario === 'string' &&
        typeof payload.matricula === 'string' &&
        typeof payload.role === 'string' &&
        typeof payload.status === 'string'
      ) {
        return {
          sub: payload.sub,
          email: payload.email,
          tipoUsuario: payload.tipoUsuario as TipoUsuario,
          matricula: payload.matricula,
          role: payload.role as Role,
          status: payload.status as Status,
          iat: payload.iat,
          exp: payload.exp,
        };
      }

      throw new Error(
        'Payload do token n√£o cont√©m as propriedades necess√°rias',
      );
    } catch (err) {
      // üîß CORRE√á√ÉO: vari√°vel renomeada
      throw new Error(`Token JWT inv√°lido: ${err.message}`);
    }
  }

  /**
   * üîÑ Gera refresh token simplificado
   * @param userId - ID do usu√°rio
   * @param secret - Chave secreta para assinatura
   * @param expiresIn - Tempo de expira√ß√£o (ex: '7d', '30d')
   * @returns Refresh token JWT
   */
  static async gerarRefreshToken(
    userId: string,
    secret: string,
    expiresIn: string = '7d',
  ): Promise<string> {
    const secretKey = this.textEncoder.encode(secret);

    return new SignJWT({ sub: userId, type: 'refresh' })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime(expiresIn)
      .sign(secretKey);
  }

  /**
   * üìä Decodifica token sem verificar assinatura (apenas para debug)
   * ‚ö†Ô∏è N√ÉO usar em produ√ß√£o para valida√ß√£o
   * @param token - Token JWT para decodificar
   * @returns Payload decodificado (n√£o verificado)
   */
  static decodificarToken(token: string): any {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) {
        throw new Error('Token JWT malformado');
      }

      const payload = JSON.parse(
        Buffer.from(parts[1], 'base64url').toString('utf8'),
      );
      return payload;
    } catch (err) {
      // üîß CORRE√á√ÉO: vari√°vel renomeada
      throw new Error(`Erro ao decodificar token: ${err.message}`);
    }
  }

  /**
   * ‚è∞ Verifica se o token est√° expirado
   * @param token - Token JWT para verificar
   * @returns true se o token estiver expirado
   */
  static isTokenExpirado(token: string): boolean {
    try {
      const payload = this.decodificarToken(token);
      if (!payload.exp) return false;

      const agora = Math.floor(Date.now() / 1000);
      return payload.exp < agora;
    } catch {
      return true; // Considerar expirado se n√£o conseguir decodificar
    }
  }
}
