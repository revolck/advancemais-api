import { Request, Response } from "express";
import bcrypt from "bcrypt";
import { prisma } from "../../../config/prisma";
import { TipoUsuario, Role } from "../enums";
import {
  validarCPF,
  validarCNPJ,
  validarEmail,
  validarSenha,
  validarConfirmacaoSenha,
  validarTelefone,
  validarDataNascimento,
  validarGenero,
  limparDocumento,
} from "../utils/validation";

/**
 * Controller para cria√ß√£o de novos usu√°rios
 * Implementa padr√µes de microservi√ßos com tratamento robusto de erros
 *
 * Caracter√≠sticas:
 * - Valida√ß√£o rigorosa de dados
 * - Transa√ß√µes de banco seguras
 * - Logs estruturados para auditoria
 * - Prepara√ß√£o de dados para middlewares
 * - Rollback autom√°tico em caso de erro
 *
 * @author Sistema AdvanceMais
 * @version 4.0.0 - Refatora√ß√£o para microservi√ßos
 */

/**
 * Interface para dados de cria√ß√£o de usu√°rio - Pessoa F√≠sica
 */
interface CriarPessoaFisicaData {
  nomeCompleto: string;
  cpf: string;
  dataNasc: string;
  telefone: string;
  genero: string;
  email: string;
  senha: string;
  confirmarSenha: string;
  aceitarTermos: boolean;
  supabaseId: string;
  role: Role;
  tipoUsuario: TipoUsuario.PESSOA_FISICA;
}

/**
 * Interface para dados de cria√ß√£o de usu√°rio - Pessoa Jur√≠dica
 */
interface CriarPessoaJuridicaData {
  nomeCompleto: string; // Nome da empresa
  cnpj: string;
  telefone: string;
  email: string;
  senha: string;
  confirmarSenha: string;
  aceitarTermos: boolean;
  supabaseId: string;
  role: Role;
  tipoUsuario: TipoUsuario.PESSOA_JURIDICA;
}

/**
 * Type union para dados de cria√ß√£o
 */
type CriarUsuarioData = CriarPessoaFisicaData | CriarPessoaJuridicaData;

/**
 * Controller para cria√ß√£o de novos usu√°rios
 * Implementa valida√ß√£o robusta e transa√ß√µes seguras
 *
 * @param req - Request object com dados do usu√°rio
 * @param res - Response object
 */
export const criarUsuario = async (req: Request, res: Response) => {
  // Gera ID de correla√ß√£o para rastreamento
  const correlationId = generateCorrelationId();
  const startTime = Date.now();

  console.log(`üöÄ [${correlationId}] Iniciando cria√ß√£o de usu√°rio`);

  try {
    const dadosUsuario: CriarUsuarioData = req.body;

    // Valida√ß√£o de entrada com logs estruturados
    const validationResult = await validateUserInput(
      dadosUsuario,
      correlationId
    );
    if (!validationResult.isValid) {
      console.warn(
        `‚ö†Ô∏è [${correlationId}] Dados inv√°lidos: ${validationResult.errors?.join(
          ", "
        )}`
      );
      return res.status(400).json({
        success: false,
        message: "Dados de entrada inv√°lidos",
        errors: validationResult.errors,
        correlationId,
      });
    }

    // Extrai dados validados
    const {
      nomeCompleto,
      telefone,
      email,
      senha,
      confirmarSenha,
      aceitarTermos,
      supabaseId,
      tipoUsuario,
      role,
    } = dadosUsuario;

    // Processa dados espec√≠ficos por tipo de usu√°rio
    const processedData = await processUserTypeSpecificData(
      dadosUsuario,
      correlationId
    );
    if (!processedData.success) {
      console.warn(
        `‚ö†Ô∏è [${correlationId}] Erro no processamento espec√≠fico: ${processedData.error}`
      );
      return res.status(400).json({
        success: false,
        message: processedData.error,
        correlationId,
      });
    }

    // Verifica duplicatas com verifica√ß√£o otimizada
    const duplicateCheck = await checkForDuplicates(
      {
        email,
        supabaseId,
        cpf: processedData.cpfLimpo,
        cnpj: processedData.cnpjLimpo,
      },
      correlationId
    );

    if (duplicateCheck.found) {
      console.warn(
        `‚ö†Ô∏è [${correlationId}] Usu√°rio duplicado: ${duplicateCheck.reason}`
      );
      return res.status(409).json({
        success: false,
        message: duplicateCheck.reason,
        correlationId,
      });
    }

    // Gera hash da senha com salt seguro
    console.log(`üîê [${correlationId}] Gerando hash da senha`);
    const senhaHash = await bcrypt.hash(senha, 12);

    // Prepara dados para inser√ß√£o no banco
    const userData = buildUserDataForDatabase({
      ...dadosUsuario,
      senha: senhaHash,
      cpfLimpo: processedData.cpfLimpo,
      cnpjLimpo: processedData.cnpjLimpo,
      dataNascimento: processedData.dataNascimento,
      generoValidado: processedData.generoValidado,
    });

    // Cria usu√°rio dentro de transa√ß√£o
    console.log(`üíæ [${correlationId}] Iniciando transa√ß√£o de banco`);
    const usuario = await createUserWithTransaction(userData, correlationId);

    const duration = Date.now() - startTime;
    console.log(
      `‚úÖ [${correlationId}] Usu√°rio criado com sucesso em ${duration}ms`
    );

    // ===================================================================
    // CR√çTICO: Prepara dados para middleware de email de boas-vindas
    // ===================================================================
    res.locals.usuarioCriado = {
      usuario: {
        id: usuario.id,
        email: usuario.email,
        nomeCompleto: usuario.nomeCompleto,
        tipoUsuario: usuario.tipoUsuario,
        // Dados adicionais para personaliza√ß√£o do email
        role: usuario.role,
        status: usuario.status,
        criadoEm: usuario.criadoEm,
      },
      // Metadados para debugging
      correlationId,
      createdAt: new Date().toISOString(),
      source: "register-controller",
    };

    console.log(
      `üìß [${correlationId}] Dados preparados para middleware de email`
    );

    // Resposta de sucesso
    const userTypeLabel =
      tipoUsuario === TipoUsuario.PESSOA_FISICA ? "Pessoa f√≠sica" : "Empresa";

    res.status(201).json({
      success: true,
      message: `${userTypeLabel} cadastrada com sucesso`,
      usuario: {
        id: usuario.id,
        email: usuario.email,
        nomeCompleto: usuario.nomeCompleto,
        tipoUsuario: usuario.tipoUsuario,
        role: usuario.role,
        status: usuario.status,
        criadoEm: usuario.criadoEm,
      },
      correlationId,
      duration: `${duration}ms`,
    });
  } catch (error) {
    const duration = Date.now() - startTime;
    const errorMessage =
      error instanceof Error ? error.message : "Erro desconhecido";

    console.error(
      `‚ùå [${correlationId}] Erro cr√≠tico na cria√ß√£o de usu√°rio ap√≥s ${duration}ms:`,
      error
    );

    // Log estruturado para monitoramento
    if (process.env.NODE_ENV === "production") {
      // Em produ√ß√£o, evita vazar detalhes do erro
      res.status(500).json({
        success: false,
        message: "Erro interno do servidor ao criar usu√°rio",
        correlationId,
        timestamp: new Date().toISOString(),
      });
    } else {
      // Em desenvolvimento, fornece mais detalhes
      res.status(500).json({
        success: false,
        message: "Erro interno do servidor ao criar usu√°rio",
        error: errorMessage,
        correlationId,
        stack: error instanceof Error ? error.stack : undefined,
      });
    }
  }
};

/**
 * Valida dados de entrada de forma robusta
 */
async function validateUserInput(
  dadosUsuario: CriarUsuarioData,
  correlationId: string
): Promise<{ isValid: boolean; errors?: string[] }> {
  const errors: string[] = [];

  try {
    const {
      nomeCompleto,
      telefone,
      email,
      senha,
      confirmarSenha,
      aceitarTermos,
      supabaseId,
      tipoUsuario,
    } = dadosUsuario;

    // Valida√ß√£o de campos obrigat√≥rios b√°sicos
    const requiredFields = [
      { field: "nomeCompleto", value: nomeCompleto },
      { field: "telefone", value: telefone },
      { field: "email", value: email },
      { field: "senha", value: senha },
      { field: "confirmarSenha", value: confirmarSenha },
      { field: "supabaseId", value: supabaseId },
      { field: "tipoUsuario", value: tipoUsuario },
    ];

    for (const { field, value } of requiredFields) {
      if (!value || (typeof value === "string" && value.trim() === "")) {
        errors.push(`Campo obrigat√≥rio: ${field}`);
      }
    }

    if (errors.length > 0) {
      return { isValid: false, errors };
    }

    // Valida√ß√£o de email
    if (!validarEmail(email)) {
      errors.push("Formato de email inv√°lido");
    }

    // Valida√ß√£o de senha
    const validacaoSenha = validarSenha(senha);
    if (!validacaoSenha.valida) {
      errors.push(...validacaoSenha.mensagens);
    }

    // Valida√ß√£o de confirma√ß√£o de senha
    if (!validarConfirmacaoSenha(senha, confirmarSenha)) {
      errors.push("Confirma√ß√£o de senha n√£o confere");
    }

    // Valida√ß√£o de telefone
    if (!validarTelefone(telefone)) {
      errors.push("Formato de telefone inv√°lido");
    }

    // Valida√ß√£o de termos
    if (!aceitarTermos) {
      errors.push("√â necess√°rio aceitar os termos de uso");
    }

    // Valida√ß√£o de tipo de usu√°rio
    if (!Object.values(TipoUsuario).includes(tipoUsuario)) {
      errors.push("Tipo de usu√°rio inv√°lido");
    }

    console.log(
      `‚úÖ [${correlationId}] Valida√ß√£o b√°sica conclu√≠da com ${errors.length} erros`
    );

    return {
      isValid: errors.length === 0,
      errors: errors.length > 0 ? errors : undefined,
    };
  } catch (error) {
    console.error(`‚ùå [${correlationId}] Erro na valida√ß√£o:`, error);
    return { isValid: false, errors: ["Erro interno na valida√ß√£o"] };
  }
}

/**
 * Processa dados espec√≠ficos por tipo de usu√°rio
 */
async function processUserTypeSpecificData(
  dadosUsuario: CriarUsuarioData,
  correlationId: string
): Promise<{
  success: boolean;
  error?: string;
  cpfLimpo?: string;
  cnpjLimpo?: string;
  dataNascimento?: Date;
  generoValidado?: string;
}> {
  try {
    const { tipoUsuario } = dadosUsuario;

    if (tipoUsuario === TipoUsuario.PESSOA_FISICA) {
      const dadosPF = dadosUsuario as CriarPessoaFisicaData;

      // Valida√ß√µes espec√≠ficas para Pessoa F√≠sica
      if (!dadosPF.cpf || !dadosPF.dataNasc || !dadosPF.genero) {
        return {
          success: false,
          error:
            "Para pessoa f√≠sica s√£o obrigat√≥rios: CPF, data de nascimento e g√™nero",
        };
      }

      // Valida CPF
      const cpfLimpo = limparDocumento(dadosPF.cpf);
      if (!validarCPF(cpfLimpo)) {
        return {
          success: false,
          error: "CPF deve ter 11 d√≠gitos v√°lidos",
        };
      }

      // Valida data de nascimento
      const validacaoData = validarDataNascimento(dadosPF.dataNasc);
      if (!validacaoData.valida) {
        return {
          success: false,
          error: validacaoData.mensagem,
        };
      }

      // Valida g√™nero
      if (!validarGenero(dadosPF.genero)) {
        return {
          success: false,
          error: "G√™nero deve ser: MASCULINO, FEMININO, OUTRO ou NAO_INFORMAR",
        };
      }

      console.log(`‚úÖ [${correlationId}] Dados de pessoa f√≠sica validados`);

      return {
        success: true,
        cpfLimpo,
        dataNascimento: new Date(dadosPF.dataNasc),
        generoValidado: dadosPF.genero.toUpperCase(),
      };
    } else if (tipoUsuario === TipoUsuario.PESSOA_JURIDICA) {
      const dadosPJ = dadosUsuario as CriarPessoaJuridicaData;

      // Valida√ß√µes espec√≠ficas para Pessoa Jur√≠dica
      if (!dadosPJ.cnpj) {
        return {
          success: false,
          error: "Para pessoa jur√≠dica √© obrigat√≥rio: CNPJ",
        };
      }

      // Valida CNPJ
      const cnpjLimpo = limparDocumento(dadosPJ.cnpj);
      if (!validarCNPJ(cnpjLimpo)) {
        return {
          success: false,
          error: "CNPJ deve ter 14 d√≠gitos v√°lidos",
        };
      }

      console.log(`‚úÖ [${correlationId}] Dados de pessoa jur√≠dica validados`);

      return {
        success: true,
        cnpjLimpo,
      };
    }

    return {
      success: false,
      error: "Tipo de usu√°rio n√£o reconhecido",
    };
  } catch (error) {
    console.error(
      `‚ùå [${correlationId}] Erro no processamento espec√≠fico:`,
      error
    );
    return {
      success: false,
      error: "Erro interno no processamento dos dados",
    };
  }
}

/**
 * Verifica duplicatas de forma otimizada
 */
async function checkForDuplicates(
  data: {
    email: string;
    supabaseId: string;
    cpf?: string;
    cnpj?: string;
  },
  correlationId: string
): Promise<{ found: boolean; reason?: string }> {
  try {
    console.log(`üîç [${correlationId}] Verificando duplicatas`);

    // Constr√≥i condi√ß√µes de busca dinamicamente
    const orConditions = [
      { email: data.email },
      { supabaseId: data.supabaseId },
    ];

    if (data.cpf) {
      orConditions.push({ cpf: data.cpf });
    }

    if (data.cnpj) {
      orConditions.push({ cnpj: data.cnpj });
    }

    const usuarioExistente = await prisma.usuario.findFirst({
      where: { OR: orConditions },
      select: {
        email: true,
        cpf: true,
        cnpj: true,
        supabaseId: true,
      },
    });

    if (usuarioExistente) {
      let reason = "J√° existe usu√°rio cadastrado com ";

      if (usuarioExistente.email === data.email) {
        reason += "este email";
      } else if (usuarioExistente.cpf === data.cpf) {
        reason += "este CPF";
      } else if (usuarioExistente.cnpj === data.cnpj) {
        reason += "este CNPJ";
      } else {
        reason += "este ID do Supabase";
      }

      return { found: true, reason };
    }

    console.log(`‚úÖ [${correlationId}] Nenhuma duplicata encontrada`);
    return { found: false };
  } catch (error) {
    console.error(
      `‚ùå [${correlationId}] Erro na verifica√ß√£o de duplicatas:`,
      error
    );
    // Em caso de erro na verifica√ß√£o, assume que n√£o h√° duplicatas
    // para n√£o bloquear o registro desnecessariamente
    return { found: false };
  }
}

/**
 * Constr√≥i dados para inser√ß√£o no banco
 */
function buildUserDataForDatabase(params: {
  nomeCompleto: string;
  email: string;
  senha: string;
  telefone: string;
  tipoUsuario: TipoUsuario;
  role: Role;
  aceitarTermos: boolean;
  supabaseId: string;
  cpfLimpo?: string;
  cnpjLimpo?: string;
  dataNascimento?: Date;
  generoValidado?: string;
}) {
  return {
    nomeCompleto: params.nomeCompleto.trim(),
    email: params.email.toLowerCase().trim(),
    senha: params.senha,
    telefone: params.telefone.trim(),
    tipoUsuario: params.tipoUsuario,
    role: params.role,
    aceitarTermos: params.aceitarTermos,
    supabaseId: params.supabaseId,
    ...(params.cpfLimpo && { cpf: params.cpfLimpo }),
    ...(params.cnpjLimpo && { cnpj: params.cnpjLimpo }),
    ...(params.dataNascimento && { dataNasc: params.dataNascimento }),
    ...(params.generoValidado && { genero: params.generoValidado }),
  };
}

/**
 * Cria usu√°rio dentro de transa√ß√£o segura
 */
async function createUserWithTransaction(userData: any, correlationId: string) {
  try {
    return await prisma.$transaction(async (tx) => {
      console.log(`üíæ [${correlationId}] Inserindo usu√°rio no banco`);

      const usuario = await tx.usuario.create({
        data: userData,
        select: {
          id: true,
          email: true,
          nomeCompleto: true,
          cpf: true,
          cnpj: true,
          telefone: true,
          dataNasc: true,
          genero: true,
          tipoUsuario: true,
          role: true,
          status: true,
          supabaseId: true,
          criadoEm: true,
          // N√£o retorna senha nem tokens por seguran√ßa
        },
      });

      console.log(
        `‚úÖ [${correlationId}] Usu√°rio inserido com ID: ${usuario.id}`
      );
      return usuario;
    });
  } catch (error) {
    console.error(`‚ùå [${correlationId}] Erro na transa√ß√£o de banco:`, error);

    // Tratamento espec√≠fico para erros de constraint do Prisma
    if (error instanceof Error && error.message.includes("Unique constraint")) {
      throw new Error(
        "Dados duplicados: email, CPF, CNPJ ou ID do Supabase j√° existem"
      );
    }

    throw error;
  }
}

/**
 * Gera ID de correla√ß√£o √∫nico para rastreamento
 */
function generateCorrelationId(): string {
  const timestamp = Date.now().toString(36);
  const random = Math.random().toString(36).substr(2, 8);
  return `reg-${timestamp}-${random}`;
}
