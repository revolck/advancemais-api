import * as Brevo from "@getbrevo/brevo";
import { brevoConfig } from "../../../config/env";

/**
 * Cliente Brevo (ex-Sendinblue) configurado para a aplica√ß√£o
 * Centraliza toda a configura√ß√£o da API do Brevo para envio de emails e SMS
 *
 * Funcionalidades:
 * - Configura√ß√£o autom√°tica das APIs (Email e SMS)
 * - Padr√£o Singleton para economia de recursos
 * - Valida√ß√£o de configura√ß√£o
 * - M√©todos auxiliares para verificar conectividade
 *
 * @author Sistema AdvanceMais
 * @version 2.0.0
 */
export class BrevoClient {
  private static instance: BrevoClient;
  private transactionalEmailsApi: Brevo.TransactionalEmailsApi;
  private transactionalSMSApi: Brevo.TransactionalSMSApi;
  private accountApi: Brevo.AccountApi;
  private apiKey: string;

  /**
   * Construtor privado para implementar padr√£o Singleton
   * Configura todas as inst√¢ncias da API do Brevo com a chave fornecida
   */
  private constructor() {
    this.apiKey = brevoConfig.apiKey;

    // Inicializa as APIs do Brevo
    this.transactionalEmailsApi = new Brevo.TransactionalEmailsApi();
    this.transactionalSMSApi = new Brevo.TransactionalSMSApi();
    this.accountApi = new Brevo.AccountApi();

    // Configura a chave de API para todas as inst√¢ncias
    this.transactionalEmailsApi.setApiKey(
      Brevo.TransactionalEmailsApiApiKeys.apiKey,
      this.apiKey
    );
    this.transactionalSMSApi.setApiKey(
      Brevo.TransactionalSMSApiApiKeys.apiKey,
      this.apiKey
    );
    this.accountApi.setApiKey(Brevo.AccountApiApiKeys.apiKey, this.apiKey);

    console.log("‚úÖ Brevo Client configurado com sucesso");
  }

  /**
   * Retorna a inst√¢ncia singleton do cliente Brevo
   * Cria uma nova inst√¢ncia apenas se n√£o existir
   *
   * @returns {BrevoClient} Inst√¢ncia configurada do cliente
   */
  public static getInstance(): BrevoClient {
    if (!BrevoClient.instance) {
      BrevoClient.instance = new BrevoClient();
    }
    return BrevoClient.instance;
  }

  /**
   * Retorna a inst√¢ncia configurada da API de emails transacionais
   * Usada para enviar emails automatizados do sistema
   *
   * @returns {Brevo.TransactionalEmailsApi} API configurada para emails
   */
  public getTransactionalEmailsApi(): Brevo.TransactionalEmailsApi {
    return this.transactionalEmailsApi;
  }

  /**
   * Retorna a inst√¢ncia configurada da API de SMS transacionais
   * Usada para enviar SMS automatizados do sistema
   *
   * @returns {Brevo.TransactionalSMSApi} API configurada para SMS
   */
  public getTransactionalSMSApi(): Brevo.TransactionalSMSApi {
    return this.transactionalSMSApi;
  }

  /**
   * Retorna a inst√¢ncia da API de conta
   * Usada para obter informa√ß√µes da conta e validar configura√ß√£o
   *
   * @returns {Brevo.AccountApi} API configurada para conta
   */
  public getAccountApi(): Brevo.AccountApi {
    return this.accountApi;
  }

  /**
   * Verifica se o cliente est√° corretamente configurado
   * Faz uma chamada de teste para a API para validar as credenciais
   *
   * @returns {Promise<boolean>} true se configurado corretamente, false caso contr√°rio
   */
  public async isConfigured(): Promise<boolean> {
    try {
      console.log("üîß Testando configura√ß√£o do Brevo...");

      // Tenta obter informa√ß√µes da conta para validar a API key
      await this.accountApi.getAccount();

      console.log("‚úÖ Brevo configurado e conectado com sucesso");
      return true;
    } catch (error) {
      console.error("‚ùå Erro ao verificar configura√ß√£o do Brevo:", error);

      // Se o erro for de autentica√ß√£o, a API key est√° incorreta
      if (error instanceof Error) {
        if (
          error.message.includes("401") ||
          error.message.includes("Unauthorized")
        ) {
          console.error("üîë API Key do Brevo inv√°lida ou expirada");
        } else if (
          error.message.includes("403") ||
          error.message.includes("Forbidden")
        ) {
          console.error("üö´ API Key do Brevo sem permiss√µes suficientes");
        } else {
          console.error("üåê Erro de conectividade com Brevo:", error.message);
        }
      }

      return false;
    }
  }

  /**
   * Retorna informa√ß√µes b√°sicas da conta Brevo
   * √ötil para debugging e monitoramento
   *
   * @returns {Promise<any>} Informa√ß√µes da conta ou null em caso de erro
   */
  public async getAccountInfo(): Promise<any> {
    try {
      const accountInfo = await this.accountApi.getAccount();
      return accountInfo;
    } catch (error) {
      console.error("Erro ao obter informa√ß√µes da conta Brevo:", error);
      return null;
    }
  }

  /**
   * Valida se a API key est√° no formato correto
   * Brevo API keys geralmente seguem um padr√£o espec√≠fico
   *
   * @returns {boolean} true se o formato parece v√°lido
   */
  public validateApiKeyFormat(): boolean {
    if (!this.apiKey || this.apiKey.trim() === "") {
      console.error("‚ùå API Key do Brevo n√£o configurada");
      return false;
    }

    // Brevo API keys geralmente t√™m um formato espec√≠fico
    // Valida√ß√£o b√°sica de formato (ajuste conforme necess√°rio)
    if (this.apiKey.length < 20) {
      console.error("‚ùå API Key do Brevo parece muito curta");
      return false;
    }

    return true;
  }

  /**
   * For√ßa uma nova inst√¢ncia do cliente (√∫til para testes ou reconfigura√ß√£o)
   * Use com cuidado em produ√ß√£o
   */
  public static resetInstance(): void {
    BrevoClient.instance = null as any;
    console.log("üîÑ Inst√¢ncia do Brevo Client resetada");
  }
}
