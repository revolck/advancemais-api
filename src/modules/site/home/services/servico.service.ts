import { Injectable, NotFoundException, Logger } from '@nestjs/common';
import { TipoServico } from '@prisma/client';
import { DatabaseService } from '../../../../database/database.service';
import { CriarServicoDto } from '../dto/criar-servico.dto';
import { AtualizarServicoDto } from '../dto/atualizar-servico.dto';

/**
 * üõ†Ô∏è Service para gest√£o de servi√ßos
 */
@Injectable()
export class ServicoService {
  private readonly logger = new Logger(ServicoService.name);

  constructor(private database: DatabaseService) {}

  /**
   * üìã Listar todos os servi√ßos ativos
   */
  async listarTodos(tipo?: TipoServico) {
    try {
      const where: any = { ativo: true };

      if (tipo) {
        where.tipo = tipo;
      }

      return await this.database.servico.findMany({
        where,
        orderBy: { criadoEm: 'desc' },
      });
    } catch (error) {
      this.logger.error('Erro ao listar servi√ßos:', error);
      throw error;
    }
  }

  /**
   * üîç Buscar servi√ßo por ID
   */
  async buscarPorId(id: number) {
    try {
      const servico = await this.database.servico.findUnique({
        where: { id },
      });

      if (!servico) {
        throw new NotFoundException(`Servi√ßo com ID ${id} n√£o encontrado`);
      }

      return servico;
    } catch (error) {
      this.logger.error(`Erro ao buscar servi√ßo ${id}:`, error);
      throw error;
    }
  }

  /**
   * ‚ûï Criar novo servi√ßo
   */
  async criar(criarServicoDto: CriarServicoDto) {
    try {
      const servico = await this.database.servico.create({
        data: criarServicoDto,
      });

      this.logger.log(`Servi√ßo criado: ${servico.id} - ${servico.titulo}`);
      return servico;
    } catch (error) {
      this.logger.error('Erro ao criar servi√ßo:', error);
      throw error;
    }
  }

  /**
   * ‚úèÔ∏è Atualizar servi√ßo
   */
  async atualizar(id: number, atualizarServicoDto: AtualizarServicoDto) {
    try {
      await this.buscarPorId(id);

      const servico = await this.database.servico.update({
        where: { id },
        data: atualizarServicoDto,
      });

      this.logger.log(`Servi√ßo atualizado: ${servico.id} - ${servico.titulo}`);
      return servico;
    } catch (error) {
      this.logger.error(`Erro ao atualizar servi√ßo ${id}:`, error);
      throw error;
    }
  }

  /**
   * üóëÔ∏è Remover servi√ßo (soft delete)
   */
  async remover(id: number) {
    try {
      await this.buscarPorId(id);

      await this.database.servico.update({
        where: { id },
        data: { ativo: false },
      });

      this.logger.log(`Servi√ßo removido: ${id}`);
      return { message: 'Servi√ßo removido com sucesso' };
    } catch (error) {
      this.logger.error(`Erro ao remover servi√ßo ${id}:`, error);
      throw error;
    }
  }
}
